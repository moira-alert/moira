// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/metric_source/prometheus (interfaces: PrometheusApi)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/prometheus_api.go -package=mock_moira_alert github.com/moira-alert/moira/metric_source/prometheus PrometheusApi
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	context "context"
	reflect "reflect"

	v1 "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
	gomock "go.uber.org/mock/gomock"
)

// MockPrometheusApi is a mock of PrometheusApi interface.
type MockPrometheusApi struct {
	ctrl     *gomock.Controller
	recorder *MockPrometheusApiMockRecorder
	isgomock struct{}
}

// MockPrometheusApiMockRecorder is the mock recorder for MockPrometheusApi.
type MockPrometheusApiMockRecorder struct {
	mock *MockPrometheusApi
}

// NewMockPrometheusApi creates a new mock instance.
func NewMockPrometheusApi(ctrl *gomock.Controller) *MockPrometheusApi {
	mock := &MockPrometheusApi{ctrl: ctrl}
	mock.recorder = &MockPrometheusApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrometheusApi) EXPECT() *MockPrometheusApiMockRecorder {
	return m.recorder
}

// QueryRange mocks base method.
func (m *MockPrometheusApi) QueryRange(ctx context.Context, query string, r v1.Range, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, r}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRange", varargs...)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(v1.Warnings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryRange indicates an expected call of QueryRange.
func (mr *MockPrometheusApiMockRecorder) QueryRange(ctx, query, r any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, r}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRange", reflect.TypeOf((*MockPrometheusApi)(nil).QueryRange), varargs...)
}
