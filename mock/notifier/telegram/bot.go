// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/senders/telegram (interfaces: Bot)
//
// Generated by this command:
//
//	mockgen -destination=mock/notifier/telegram/bot.go -package=mock_telegram github.com/moira-alert/moira/senders/telegram Bot
//

// Package mock_telegram is a generated GoMock package.
package mock_telegram

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	telebot "gopkg.in/telebot.v3"
)

// MockBot is a mock of Bot interface.
type MockBot struct {
	ctrl     *gomock.Controller
	recorder *MockBotMockRecorder
	isgomock struct{}
}

// MockBotMockRecorder is the mock recorder for MockBot.
type MockBotMockRecorder struct {
	mock *MockBot
}

// NewMockBot creates a new mock instance.
func NewMockBot(ctrl *gomock.Controller) *MockBot {
	mock := &MockBot{ctrl: ctrl}
	mock.recorder = &MockBotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBot) EXPECT() *MockBotMockRecorder {
	return m.recorder
}

// ChatByUsername mocks base method.
func (m *MockBot) ChatByUsername(name string) (*telebot.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatByUsername", name)
	ret0, _ := ret[0].(*telebot.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatByUsername indicates an expected call of ChatByUsername.
func (mr *MockBotMockRecorder) ChatByUsername(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatByUsername", reflect.TypeOf((*MockBot)(nil).ChatByUsername), name)
}

// Handle mocks base method.
func (m_2 *MockBot) Handle(endpoint any, h telebot.HandlerFunc, m ...telebot.MiddlewareFunc) {
	m_2.ctrl.T.Helper()
	varargs := []any{endpoint, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	m_2.ctrl.Call(m_2, "Handle", varargs...)
}

// Handle indicates an expected call of Handle.
func (mr *MockBotMockRecorder) Handle(endpoint, h any, m ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{endpoint, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockBot)(nil).Handle), varargs...)
}

// Reply mocks base method.
func (m *MockBot) Reply(to *telebot.Message, what any, opts ...any) (*telebot.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{to, what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reply", varargs...)
	ret0, _ := ret[0].(*telebot.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reply indicates an expected call of Reply.
func (mr *MockBotMockRecorder) Reply(to, what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{to, what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockBot)(nil).Reply), varargs...)
}

// Send mocks base method.
func (m *MockBot) Send(to telebot.Recipient, what any, opts ...any) (*telebot.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{to, what}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(*telebot.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockBotMockRecorder) Send(to, what any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{to, what}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBot)(nil).Send), varargs...)
}

// SendAlbum mocks base method.
func (m *MockBot) SendAlbum(to telebot.Recipient, a telebot.Album, opts ...any) ([]telebot.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{to, a}
	for _, a_2 := range opts {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "SendAlbum", varargs...)
	ret0, _ := ret[0].([]telebot.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAlbum indicates an expected call of SendAlbum.
func (mr *MockBotMockRecorder) SendAlbum(to, a any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{to, a}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAlbum", reflect.TypeOf((*MockBot)(nil).SendAlbum), varargs...)
}

// Start mocks base method.
func (m *MockBot) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockBotMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBot)(nil).Start))
}

// Stop mocks base method.
func (m *MockBot) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockBotMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBot)(nil).Stop))
}
