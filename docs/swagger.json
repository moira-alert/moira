{
    "swagger": "2.0",
    "info": {
        "description": "This is an API description for [Moira Alert API](https://moira.readthedocs.io/en/latest/overview.html).",
        "title": "Moira Alert",
        "contact": {
            "name": "Contact Moira Team",
            "email": "opensource@skbkontur.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "master"
    },
    "basePath": "/api",
    "paths": {
        "/api/config": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get available configuration",
                "operationId": "get-web-config",
                "responses": {
                    "200": {
                        "description": "Configuration fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.ConfigurationResponse"
                        }
                    }
                }
            }
        },
        "/contact": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Gets all Moira contacts",
                "operationId": "get-all-contacts",
                "responses": {
                    "200": {
                        "description": "Contacts fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ContactList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Creates a new contact notification for the current user",
                "operationId": "create-new-contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/contact/{contactId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Updates an existing notification contact to the values passed in the request body",
                "operationId": "update-contact",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the contact to update",
                        "name": "contactId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated contact",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Deletes notification contact for the current user and remove the contact ID from all subscriptions",
                "operationId": "remove-contact",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the contact to remove",
                        "name": "contactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact has been deleted"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/contact/{contactId}/test": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Push a test notification to verify that the contact is properly set up",
                "operationId": "send-test-contact-notification",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of the target contact",
                        "name": "contactId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test successful"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/event/all": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Deletes all notification events",
                "operationId": "delete-all-events",
                "responses": {
                    "200": {
                        "description": "Events removed successfully"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/event/{triggerId}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Gets all trigger events for current page and their count",
                "operationId": "get-events-list",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "5A8AF369-86D2-44DD-B514-D47995ED6AF7",
                        "description": "The ID of updated trigger",
                        "name": "triggerId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "x-example": "15",
                        "description": "Number of items to be displayed on one page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "x-example": "1",
                        "description": "Defines the number of the displayed page. E.g, p=2 would display the 2nd page",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.EventsList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/health/notifier": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get notifier state",
                "operationId": "get-notifier-state",
                "responses": {
                    "200": {
                        "description": "Notifier state retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.NotifierState"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Update notifier state",
                "operationId": "set-notifier-state",
                "parameters": [
                    {
                        "description": "New notifier state",
                        "name": "state",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.NotifierState"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update state of the Moira service",
                        "schema": {
                            "$ref": "#/definitions/dto.NotifierState"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/notification": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Gets a paginated list of notifications, all notifications are fetched if end = -1 and start = 0",
                "operationId": "get-notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "x-example": "1",
                        "description": "Default Value: 0",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "x-example": "15",
                        "description": "Default Value: -1",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.NotificationsList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Delete a notification by id",
                "operationId": "delete-notification",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "5A8AF369-86D2-44DD-B514-D47995ED6AF7",
                        "description": "The ID of updated trigger",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification have been deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.NotificationDeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/notification/all": {
            "delete": {
                "tags": [
                    "notification"
                ],
                "summary": "Deletes all available notifications",
                "operationId": "delete-all-notifications",
                "responses": {
                    "200": {
                        "description": "All notifications have been deleted"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/pattern": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pattern"
                ],
                "summary": "Get all patterns",
                "operationId": "get-all-patterns",
                "responses": {
                    "200": {
                        "description": "Patterns fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.PatternList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/pattern/{pattern}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pattern"
                ],
                "summary": "Deletes a Moira pattern",
                "operationId": "delete-pattern",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "DevOps.my_server.hdd.freespace_mbytes",
                        "description": "Trigger pattern to operate on",
                        "name": "pattern",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pattern deleted successfully"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Get all subscriptions",
                "operationId": "get-user-subscriptions",
                "responses": {
                    "200": {
                        "description": "Subscriptions fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Create a new subscription",
                "operationId": "create-subscription",
                "parameters": [
                    {
                        "description": "Subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription/{subscriptionId}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Update a subscription",
                "operationId": "update-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to update",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Delete a subscription",
                "operationId": "remove-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to remove",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription deleted"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription/{subscriptionId}/test": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Send a test notification for a subscription",
                "operationId": "send-test-notification",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to send the test notification",
                        "name": "subscriptionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test notification sent successfully"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Get all tags",
                "operationId": "get-all-tags",
                "responses": {
                    "200": {
                        "description": "Tags fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TagsData"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag/stats": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Get all tags and their subscriptions",
                "operationId": "get-all-tags-and-subscriptions",
                "responses": {
                    "200": {
                        "description": "Successful",
                        "schema": {
                            "$ref": "#/definitions/dto.TagsStatistics"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag/{tag}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Remove a tag",
                "operationId": "remove-tag",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "cpu",
                        "description": "Name of the tag to remove",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/team/{teamID}/subscriptions": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teamSubscription"
                ],
                "summary": "Create a new team subscription",
                "operationId": "create-new-team-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d5d98eb3-ee18-4f75-9364-244f67e23b54",
                        "description": "The ID of team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Team subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team subscription created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/contacts": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teamContact"
                ],
                "summary": "Create a new team contact",
                "operationId": "create-new-team-contact",
                "parameters": [
                    {
                        "type": "string",
                        "x-example": "d5d98eb3-ee18-4f75-9364-244f67e23b54",
                        "description": "The ID of team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Team contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team contact created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorForbiddenExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "you cannot access this resource"
                },
                "status": {
                    "type": "string",
                    "example": "Forbidden"
                }
            }
        },
        "api.ErrorInternalServerExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "server error during request handling"
                },
                "status": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "api.ErrorInvalidRequestExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "resource with the ID does not exist"
                },
                "status": {
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "api.ErrorNotFoundExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "resource with ID '66741a8c-c2ba-4357-a2c9-ee78e0e7' does not exist"
                },
                "status": {
                    "type": "string",
                    "example": "Resource not found"
                }
            }
        },
        "api.ErrorRenderExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "rendering error"
                },
                "status": {
                    "type": "string",
                    "example": "Error rendering response"
                }
            }
        },
        "dto.Contact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1dd38765-c5be-418d-81fa-7a5f879c2315"
                },
                "team_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "mail"
                },
                "user": {
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "example": "devops@example.com"
                }
            }
        },
        "dto.ContactList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ContactData"
                    }
                }
            }
        },
        "dto.EventsList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.NotificationEvent"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 0
                },
                "size": {
                    "type": "integer",
                    "example": 100
                },
                "total": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "dto.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "tag deleted"
                }
            }
        },
        "dto.NotificationDeleteResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.NotificationsList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ScheduledNotification"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.NotifierState": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Moira has been turned off for maintenance"
                },
                "state": {
                    "type": "string",
                    "example": "ERROR"
                }
            }
        },
        "dto.PatternData": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "DevOps.my_server.hdd.freespace_mbytes",
                        " DevOps.my_server.hdd.freespace_mbytes",
                        " DevOps.my_server.db.*"
                    ]
                },
                "pattern": {
                    "type": "string",
                    "example": "Devops.my_server.*"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TriggerModel"
                    }
                }
            }
        },
        "dto.PatternList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PatternData"
                    }
                }
            }
        },
        "dto.Subscription": {
            "type": "object",
            "properties": {
                "any_tags": {
                    "type": "boolean",
                    "example": false
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "acd2db98-1659-4a2f-b227-52d71f6e3ba1"
                    ]
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "ignore_recoverings": {
                    "type": "boolean",
                    "example": false
                },
                "ignore_warnings": {
                    "type": "boolean",
                    "example": false
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "cpu"
                    ]
                },
                "team_id": {
                    "type": "string",
                    "example": "324516ed-4924-4154-a62c-eb124234fce"
                },
                "throttling": {
                    "type": "boolean",
                    "example": false
                },
                "user": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "dto.SubscriptionList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                }
            }
        },
        "dto.TagStatistics": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "cpu"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
                    ]
                }
            }
        },
        "dto.TagsData": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "cpu"
                    ]
                }
            }
        },
        "dto.TagsStatistics": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TagStatistics"
                    }
                }
            }
        },
        "dto.TriggerModel": {
            "type": "object",
            "properties": {
                "alone_metrics": {
                    "description": "A list of targets that have only alone metrics",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "t1": true
                    }
                },
                "created_at": {
                    "description": "Datetime when the trigger was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "Username who created trigger",
                    "type": "string"
                },
                "desc": {
                    "description": "Description string",
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "description": "ERROR threshold",
                    "type": "number",
                    "example": 1000
                },
                "expression": {
                    "description": "Used if you need more complex logic than provided by WARN/ERROR values",
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "description": "Trigger unique ID",
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "description": "Shows if trigger is remote (graphite-backend) based or stored inside Moira-Redis DB",
                    "type": "boolean",
                    "example": false
                },
                "mute_new_metrics": {
                    "description": "If true, first event NODATA → OK will be omitted",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Trigger name",
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "patterns": {
                    "description": "Graphite patterns for trigger",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "sched": {
                    "description": "Determines when Moira should monitor trigger",
                    "allOf": [
                        {
                            "$ref": "#/definitions/moira.ScheduleData"
                        }
                    ]
                },
                "tags": {
                    "description": "Set of tags to manipulate subscriptions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        " disk"
                    ]
                },
                "targets": {
                    "description": "Graphite-like targets: t1, t2, ...",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "trigger_type": {
                    "description": "Could be: rising, falling, expression",
                    "type": "string",
                    "example": "rising"
                },
                "ttl": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "integer",
                    "example": 600
                },
                "ttl_state": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "string",
                    "example": "NODATA"
                },
                "updated_at": {
                    "description": "Datetime  when the trigger was updated",
                    "type": "string"
                },
                "updated_by": {
                    "description": "Username who updated trigger",
                    "type": "string"
                },
                "warn_value": {
                    "description": "WARN threshold",
                    "type": "number",
                    "example": 5000
                }
            }
        },
        "handler.ConfigurationResponse": {
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.Contact"
                    }
                },
                "remoteAllowed": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handler.Contact": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "example": "Telegram"
                },
                "type": {
                    "type": "string",
                    "example": "telegram"
                }
            }
        },
        "moira.ContactData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1dd38765-c5be-418d-81fa-7a5f879c2315"
                },
                "team": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "mail"
                },
                "user": {
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "example": "devops@example.com"
                }
            }
        },
        "moira.EventInfo": {
            "type": "object",
            "properties": {
                "interval": {
                    "type": "integer",
                    "example": 0
                },
                "maintenance": {
                    "$ref": "#/definitions/moira.MaintenanceInfo"
                }
            }
        },
        "moira.MaintenanceInfo": {
            "type": "object",
            "properties": {
                "remove_time": {
                    "type": "integer",
                    "example": 0
                },
                "remove_user": {
                    "type": "string"
                },
                "setup_time": {
                    "type": "integer",
                    "example": 0
                },
                "setup_user": {
                    "type": "string"
                }
            }
        },
        "moira.NotificationEvent": {
            "type": "object",
            "properties": {
                "contactId": {
                    "type": "string"
                },
                "event_message": {
                    "$ref": "#/definitions/moira.EventInfo"
                },
                "metric": {
                    "type": "string",
                    "example": "carbon.agents.*.metricsReceived"
                },
                "msg": {
                    "type": "string"
                },
                "old_state": {
                    "type": "string",
                    "example": "ERROR"
                },
                "state": {
                    "type": "string",
                    "example": "OK"
                },
                "sub_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "trigger_event": {
                    "type": "boolean",
                    "example": true
                },
                "trigger_id": {
                    "type": "string",
                    "example": "5ff37996-8927-4cab-8987-970e80d8e0a8"
                },
                "value": {
                    "type": "number",
                    "example": 70
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "moira.PlottingData": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "theme": {
                    "type": "string",
                    "example": "dark"
                }
            }
        },
        "moira.ScheduleData": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ScheduleDataDay"
                    }
                },
                "endOffset": {
                    "type": "integer",
                    "example": 1439
                },
                "startOffset": {
                    "type": "integer",
                    "example": 0
                },
                "tzOffset": {
                    "type": "integer",
                    "example": -60
                }
            }
        },
        "moira.ScheduleDataDay": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Mon"
                }
            }
        },
        "moira.ScheduledNotification": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/moira.ContactData"
                },
                "event": {
                    "$ref": "#/definitions/moira.NotificationEvent"
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "send_fail": {
                    "type": "integer",
                    "example": 0
                },
                "throttled": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1594471927
                },
                "trigger": {
                    "$ref": "#/definitions/moira.TriggerData"
                }
            }
        },
        "moira.SubscriptionData": {
            "type": "object",
            "properties": {
                "any_tags": {
                    "type": "boolean",
                    "example": false
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "acd2db98-1659-4a2f-b227-52d71f6e3ba1"
                    ]
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "ignore_recoverings": {
                    "type": "boolean",
                    "example": false
                },
                "ignore_warnings": {
                    "type": "boolean",
                    "example": false
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "cpu"
                    ]
                },
                "team_id": {
                    "type": "string",
                    "example": "324516ed-4924-4154-a62c-eb124234fce"
                },
                "throttling": {
                    "type": "boolean",
                    "example": false
                },
                "user": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "moira.TriggerData": {
            "type": "object",
            "properties": {
                "__notifier_trigger_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "desc": {
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "type": "number",
                    "example": 1000
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "warn_value": {
                    "type": "number",
                    "example": 5000
                }
            }
        }
    },
    "tags": [
        {
            "description": "APIs for working with Moira contacts. For more details, see \u003chttps://moira.readthedocs.io/en/latest/installation/webhooks_scripts.html#contact/\u003e",
            "name": "contact"
        },
        {
            "description": "View Moira's runtime configuration. For more details, see \u003chttps://moira.readthedocs.io/en/latest/installation/configuration.html\u003e",
            "name": "config"
        },
        {
            "description": "APIs for interacting with notification events. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/trigger_page.html#event-history/\u003e for details",
            "name": "event"
        },
        {
            "description": "interact with Moira states/health status. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/selfstate.html#self-state-monitor/\u003e for details",
            "name": "health"
        },
        {
            "description": "manage notifications that are currently in queue. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/hidden_pages.html#notifications/\u003e",
            "name": "notification"
        },
        {
            "description": "APIs for interacting with graphite patterns in Moira. See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#pattern/\u003e",
            "name": "pattern"
        },
        {
            "description": "APIs for managing a user's subscription(s). See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#subscription/\u003e to learn about Moira subscriptions",
            "name": "subscription"
        },
        {
            "description": "APIs for managing tags (a grouping of tags and subscriptions). See \u003chttps://moira.readthedocs.io/en/latest/user_guide/subscriptions.html#tags/\u003e",
            "name": "tag"
        },
        {
            "description": "APIs for interacting with Moira triggers. See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#trigger/\u003e to learn about Triggers",
            "name": "trigger"
        },
        {
            "description": "APIs for interacting with Moira teams",
            "name": "team"
        },
        {
            "description": "APIs for interacting with Moira subscriptions owned by certain team",
            "name": "teamSubscription"
        },
        {
            "description": "APIs for interacting with Moira contacts owned by certain team.",
            "name": "teamContact"
        }
    ]
}