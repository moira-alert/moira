// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: Database)

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	moira "github.com/moira-alert/moira"
	tomb_v2 "gopkg.in/tomb.v2"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AcquireTriggerCheckLock mocks base method
func (m *MockDatabase) AcquireTriggerCheckLock(arg0 string, arg1 int) error {
	ret := m.ctrl.Call(m, "AcquireTriggerCheckLock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireTriggerCheckLock indicates an expected call of AcquireTriggerCheckLock
func (mr *MockDatabaseMockRecorder) AcquireTriggerCheckLock(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).AcquireTriggerCheckLock), arg0, arg1)
}

// AddNotification mocks base method
func (m *MockDatabase) AddNotification(arg0 *moira.ScheduledNotification) error {
	ret := m.ctrl.Call(m, "AddNotification", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification
func (mr *MockDatabaseMockRecorder) AddNotification(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockDatabase)(nil).AddNotification), arg0)
}

// AddNotifications mocks base method
func (m *MockDatabase) AddNotifications(arg0 []*moira.ScheduledNotification, arg1 int64) error {
	ret := m.ctrl.Call(m, "AddNotifications", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotifications indicates an expected call of AddNotifications
func (mr *MockDatabaseMockRecorder) AddNotifications(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotifications", reflect.TypeOf((*MockDatabase)(nil).AddNotifications), arg0, arg1)
}

// AddPatternMetric mocks base method
func (m *MockDatabase) AddPatternMetric(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "AddPatternMetric", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPatternMetric indicates an expected call of AddPatternMetric
func (mr *MockDatabaseMockRecorder) AddPatternMetric(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPatternMetric", reflect.TypeOf((*MockDatabase)(nil).AddPatternMetric), arg0, arg1)
}

// DeleteTriggerCheckLock mocks base method
func (m *MockDatabase) DeleteTriggerCheckLock(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTriggerCheckLock", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerCheckLock indicates an expected call of DeleteTriggerCheckLock
func (mr *MockDatabaseMockRecorder) DeleteTriggerCheckLock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerCheckLock), arg0)
}

// DeleteTriggerThrottling mocks base method
func (m *MockDatabase) DeleteTriggerThrottling(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTriggerThrottling", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerThrottling indicates an expected call of DeleteTriggerThrottling
func (mr *MockDatabaseMockRecorder) DeleteTriggerThrottling(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerThrottling), arg0)
}

// DeregisterBot mocks base method
func (m *MockDatabase) DeregisterBot(arg0 string) bool {
	ret := m.ctrl.Call(m, "DeregisterBot", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeregisterBot indicates an expected call of DeregisterBot
func (mr *MockDatabaseMockRecorder) DeregisterBot(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterBot", reflect.TypeOf((*MockDatabase)(nil).DeregisterBot), arg0)
}

// DeregisterBots mocks base method
func (m *MockDatabase) DeregisterBots() {
	m.ctrl.Call(m, "DeregisterBots")
}

// DeregisterBots indicates an expected call of DeregisterBots
func (mr *MockDatabaseMockRecorder) DeregisterBots() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterBots", reflect.TypeOf((*MockDatabase)(nil).DeregisterBots))
}

// FetchNotificationEvent mocks base method
func (m *MockDatabase) FetchNotificationEvent() (moira.NotificationEvent, error) {
	ret := m.ctrl.Call(m, "FetchNotificationEvent")
	ret0, _ := ret[0].(moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotificationEvent indicates an expected call of FetchNotificationEvent
func (mr *MockDatabaseMockRecorder) FetchNotificationEvent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).FetchNotificationEvent))
}

// FetchNotifications mocks base method
func (m *MockDatabase) FetchNotifications(arg0 int64) ([]*moira.ScheduledNotification, error) {
	ret := m.ctrl.Call(m, "FetchNotifications", arg0)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotifications indicates an expected call of FetchNotifications
func (mr *MockDatabaseMockRecorder) FetchNotifications(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotifications", reflect.TypeOf((*MockDatabase)(nil).FetchNotifications), arg0)
}

// GetAllContacts mocks base method
func (m *MockDatabase) GetAllContacts() ([]*moira.ContactData, error) {
	ret := m.ctrl.Call(m, "GetAllContacts")
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContacts indicates an expected call of GetAllContacts
func (mr *MockDatabaseMockRecorder) GetAllContacts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContacts", reflect.TypeOf((*MockDatabase)(nil).GetAllContacts))
}

// GetChecksUpdatesCount mocks base method
func (m *MockDatabase) GetChecksUpdatesCount() (int64, error) {
	ret := m.ctrl.Call(m, "GetChecksUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksUpdatesCount indicates an expected call of GetChecksUpdatesCount
func (mr *MockDatabaseMockRecorder) GetChecksUpdatesCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetChecksUpdatesCount))
}

// GetContact mocks base method
func (m *MockDatabase) GetContact(arg0 string) (moira.ContactData, error) {
	ret := m.ctrl.Call(m, "GetContact", arg0)
	ret0, _ := ret[0].(moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact
func (mr *MockDatabaseMockRecorder) GetContact(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockDatabase)(nil).GetContact), arg0)
}

// GetContacts mocks base method
func (m *MockDatabase) GetContacts(arg0 []string) ([]*moira.ContactData, error) {
	ret := m.ctrl.Call(m, "GetContacts", arg0)
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts
func (mr *MockDatabaseMockRecorder) GetContacts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockDatabase)(nil).GetContacts), arg0)
}

// GetIDByUsername mocks base method
func (m *MockDatabase) GetIDByUsername(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "GetIDByUsername", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDByUsername indicates an expected call of GetIDByUsername
func (mr *MockDatabaseMockRecorder) GetIDByUsername(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDByUsername", reflect.TypeOf((*MockDatabase)(nil).GetIDByUsername), arg0, arg1)
}

// GetMetricRetention mocks base method
func (m *MockDatabase) GetMetricRetention(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "GetMetricRetention", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricRetention indicates an expected call of GetMetricRetention
func (mr *MockDatabaseMockRecorder) GetMetricRetention(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricRetention", reflect.TypeOf((*MockDatabase)(nil).GetMetricRetention), arg0)
}

// GetMetricsUpdatesCount mocks base method
func (m *MockDatabase) GetMetricsUpdatesCount() (int64, error) {
	ret := m.ctrl.Call(m, "GetMetricsUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsUpdatesCount indicates an expected call of GetMetricsUpdatesCount
func (mr *MockDatabaseMockRecorder) GetMetricsUpdatesCount() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetMetricsUpdatesCount))
}

// GetMetricsValues mocks base method
func (m *MockDatabase) GetMetricsValues(arg0 []string, arg1, arg2 int64) (map[string][]*moira.MetricValue, error) {
	ret := m.ctrl.Call(m, "GetMetricsValues", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]*moira.MetricValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsValues indicates an expected call of GetMetricsValues
func (mr *MockDatabaseMockRecorder) GetMetricsValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsValues", reflect.TypeOf((*MockDatabase)(nil).GetMetricsValues), arg0, arg1, arg2)
}

// GetNotificationEventCount mocks base method
func (m *MockDatabase) GetNotificationEventCount(arg0 string, arg1 int64) int64 {
	ret := m.ctrl.Call(m, "GetNotificationEventCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetNotificationEventCount indicates an expected call of GetNotificationEventCount
func (mr *MockDatabaseMockRecorder) GetNotificationEventCount(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEventCount", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEventCount), arg0, arg1)
}

// GetNotificationEvents mocks base method
func (m *MockDatabase) GetNotificationEvents(arg0 string, arg1, arg2 int64) ([]*moira.NotificationEvent, error) {
	ret := m.ctrl.Call(m, "GetNotificationEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationEvents indicates an expected call of GetNotificationEvents
func (mr *MockDatabaseMockRecorder) GetNotificationEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEvents), arg0, arg1, arg2)
}

// GetNotifications mocks base method
func (m *MockDatabase) GetNotifications(arg0, arg1 int64) ([]*moira.ScheduledNotification, int64, error) {
	ret := m.ctrl.Call(m, "GetNotifications", arg0, arg1)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifications indicates an expected call of GetNotifications
func (mr *MockDatabaseMockRecorder) GetNotifications(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockDatabase)(nil).GetNotifications), arg0, arg1)
}

// GetNotifierState mocks base method
func (m *MockDatabase) GetNotifierState() (string, error) {
	ret := m.ctrl.Call(m, "GetNotifierState")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifierState indicates an expected call of GetNotifierState
func (mr *MockDatabaseMockRecorder) GetNotifierState() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifierState", reflect.TypeOf((*MockDatabase)(nil).GetNotifierState))
}

// GetPatternMetrics mocks base method
func (m *MockDatabase) GetPatternMetrics(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetPatternMetrics", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternMetrics indicates an expected call of GetPatternMetrics
func (mr *MockDatabaseMockRecorder) GetPatternMetrics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternMetrics", reflect.TypeOf((*MockDatabase)(nil).GetPatternMetrics), arg0)
}

// GetPatternTriggerIDs mocks base method
func (m *MockDatabase) GetPatternTriggerIDs(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetPatternTriggerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternTriggerIDs indicates an expected call of GetPatternTriggerIDs
func (mr *MockDatabaseMockRecorder) GetPatternTriggerIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetPatternTriggerIDs), arg0)
}

// GetPatterns mocks base method
func (m *MockDatabase) GetPatterns() ([]string, error) {
	ret := m.ctrl.Call(m, "GetPatterns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatterns indicates an expected call of GetPatterns
func (mr *MockDatabaseMockRecorder) GetPatterns() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatterns", reflect.TypeOf((*MockDatabase)(nil).GetPatterns))
}

// GetSubscription mocks base method
func (m *MockDatabase) GetSubscription(arg0 string) (moira.SubscriptionData, error) {
	ret := m.ctrl.Call(m, "GetSubscription", arg0)
	ret0, _ := ret[0].(moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *MockDatabaseMockRecorder) GetSubscription(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDatabase)(nil).GetSubscription), arg0)
}

// GetSubscriptions mocks base method
func (m *MockDatabase) GetSubscriptions(arg0 []string) ([]*moira.SubscriptionData, error) {
	ret := m.ctrl.Call(m, "GetSubscriptions", arg0)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions
func (mr *MockDatabaseMockRecorder) GetSubscriptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetSubscriptions), arg0)
}

// GetTagNames mocks base method
func (m *MockDatabase) GetTagNames() ([]string, error) {
	ret := m.ctrl.Call(m, "GetTagNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagNames indicates an expected call of GetTagNames
func (mr *MockDatabaseMockRecorder) GetTagNames() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagNames", reflect.TypeOf((*MockDatabase)(nil).GetTagNames))
}

// GetTagTriggerIDs mocks base method
func (m *MockDatabase) GetTagTriggerIDs(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetTagTriggerIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagTriggerIDs indicates an expected call of GetTagTriggerIDs
func (mr *MockDatabaseMockRecorder) GetTagTriggerIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTagTriggerIDs), arg0)
}

// GetTagsSubscriptions mocks base method
func (m *MockDatabase) GetTagsSubscriptions(arg0 []string) ([]*moira.SubscriptionData, error) {
	ret := m.ctrl.Call(m, "GetTagsSubscriptions", arg0)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsSubscriptions indicates an expected call of GetTagsSubscriptions
func (mr *MockDatabaseMockRecorder) GetTagsSubscriptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetTagsSubscriptions), arg0)
}

// GetTrigger mocks base method
func (m *MockDatabase) GetTrigger(arg0 string) (moira.Trigger, error) {
	ret := m.ctrl.Call(m, "GetTrigger", arg0)
	ret0, _ := ret[0].(moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger
func (mr *MockDatabaseMockRecorder) GetTrigger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*MockDatabase)(nil).GetTrigger), arg0)
}

// GetTriggerCheckIDs mocks base method
func (m *MockDatabase) GetTriggerCheckIDs(arg0 []string, arg1 bool) ([]string, error) {
	ret := m.ctrl.Call(m, "GetTriggerCheckIDs", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerCheckIDs indicates an expected call of GetTriggerCheckIDs
func (mr *MockDatabaseMockRecorder) GetTriggerCheckIDs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerCheckIDs", reflect.TypeOf((*MockDatabase)(nil).GetTriggerCheckIDs), arg0, arg1)
}

// GetTriggerChecks mocks base method
func (m *MockDatabase) GetTriggerChecks(arg0 []string) ([]*moira.TriggerCheck, error) {
	ret := m.ctrl.Call(m, "GetTriggerChecks", arg0)
	ret0, _ := ret[0].([]*moira.TriggerCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerChecks indicates an expected call of GetTriggerChecks
func (mr *MockDatabaseMockRecorder) GetTriggerChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerChecks", reflect.TypeOf((*MockDatabase)(nil).GetTriggerChecks), arg0)
}

// GetTriggerIDs mocks base method
func (m *MockDatabase) GetTriggerIDs() ([]string, error) {
	ret := m.ctrl.Call(m, "GetTriggerIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerIDs indicates an expected call of GetTriggerIDs
func (mr *MockDatabaseMockRecorder) GetTriggerIDs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTriggerIDs))
}

// GetTriggerLastCheck mocks base method
func (m *MockDatabase) GetTriggerLastCheck(arg0 string) (moira.CheckData, error) {
	ret := m.ctrl.Call(m, "GetTriggerLastCheck", arg0)
	ret0, _ := ret[0].(moira.CheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerLastCheck indicates an expected call of GetTriggerLastCheck
func (mr *MockDatabaseMockRecorder) GetTriggerLastCheck(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).GetTriggerLastCheck), arg0)
}

// GetTriggerThrottling mocks base method
func (m *MockDatabase) GetTriggerThrottling(arg0 string) (time.Time, time.Time) {
	ret := m.ctrl.Call(m, "GetTriggerThrottling", arg0)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTriggerThrottling indicates an expected call of GetTriggerThrottling
func (mr *MockDatabaseMockRecorder) GetTriggerThrottling(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).GetTriggerThrottling), arg0)
}

// GetTriggers mocks base method
func (m *MockDatabase) GetTriggers(arg0 []string) ([]*moira.Trigger, error) {
	ret := m.ctrl.Call(m, "GetTriggers", arg0)
	ret0, _ := ret[0].([]*moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers
func (mr *MockDatabaseMockRecorder) GetTriggers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockDatabase)(nil).GetTriggers), arg0)
}

// GetUserContactIDs mocks base method
func (m *MockDatabase) GetUserContactIDs(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetUserContactIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContactIDs indicates an expected call of GetUserContactIDs
func (mr *MockDatabaseMockRecorder) GetUserContactIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContactIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserContactIDs), arg0)
}

// GetUserSubscriptionIDs mocks base method
func (m *MockDatabase) GetUserSubscriptionIDs(arg0 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetUserSubscriptionIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptionIDs indicates an expected call of GetUserSubscriptionIDs
func (mr *MockDatabaseMockRecorder) GetUserSubscriptionIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptionIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserSubscriptionIDs), arg0)
}

// PushNotificationEvent mocks base method
func (m *MockDatabase) PushNotificationEvent(arg0 *moira.NotificationEvent, arg1 bool) error {
	ret := m.ctrl.Call(m, "PushNotificationEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNotificationEvent indicates an expected call of PushNotificationEvent
func (mr *MockDatabaseMockRecorder) PushNotificationEvent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).PushNotificationEvent), arg0, arg1)
}

// RegisterBotIfAlreadyNot mocks base method
func (m *MockDatabase) RegisterBotIfAlreadyNot(arg0 string, arg1 time.Duration) bool {
	ret := m.ctrl.Call(m, "RegisterBotIfAlreadyNot", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RegisterBotIfAlreadyNot indicates an expected call of RegisterBotIfAlreadyNot
func (mr *MockDatabaseMockRecorder) RegisterBotIfAlreadyNot(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBotIfAlreadyNot", reflect.TypeOf((*MockDatabase)(nil).RegisterBotIfAlreadyNot), arg0, arg1)
}

// RemoveAllNotificationEvents mocks base method
func (m *MockDatabase) RemoveAllNotificationEvents() error {
	ret := m.ctrl.Call(m, "RemoveAllNotificationEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllNotificationEvents indicates an expected call of RemoveAllNotificationEvents
func (mr *MockDatabaseMockRecorder) RemoveAllNotificationEvents() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).RemoveAllNotificationEvents))
}

// RemoveAllNotifications mocks base method
func (m *MockDatabase) RemoveAllNotifications() error {
	ret := m.ctrl.Call(m, "RemoveAllNotifications")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllNotifications indicates an expected call of RemoveAllNotifications
func (mr *MockDatabaseMockRecorder) RemoveAllNotifications() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllNotifications", reflect.TypeOf((*MockDatabase)(nil).RemoveAllNotifications))
}

// RemoveContact mocks base method
func (m *MockDatabase) RemoveContact(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContact indicates an expected call of RemoveContact
func (mr *MockDatabaseMockRecorder) RemoveContact(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContact", reflect.TypeOf((*MockDatabase)(nil).RemoveContact), arg0)
}

// RemoveMetricValues mocks base method
func (m *MockDatabase) RemoveMetricValues(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "RemoveMetricValues", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricValues indicates an expected call of RemoveMetricValues
func (mr *MockDatabaseMockRecorder) RemoveMetricValues(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricValues), arg0, arg1)
}

// RemoveMetricsValues mocks base method
func (m *MockDatabase) RemoveMetricsValues(arg0 []string, arg1 int64) error {
	ret := m.ctrl.Call(m, "RemoveMetricsValues", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricsValues indicates an expected call of RemoveMetricsValues
func (mr *MockDatabaseMockRecorder) RemoveMetricsValues(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricsValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricsValues), arg0, arg1)
}

// RemoveNotification mocks base method
func (m *MockDatabase) RemoveNotification(arg0 string) (int64, error) {
	ret := m.ctrl.Call(m, "RemoveNotification", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotification indicates an expected call of RemoveNotification
func (mr *MockDatabaseMockRecorder) RemoveNotification(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotification", reflect.TypeOf((*MockDatabase)(nil).RemoveNotification), arg0)
}

// RemovePattern mocks base method
func (m *MockDatabase) RemovePattern(arg0 string) error {
	ret := m.ctrl.Call(m, "RemovePattern", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePattern indicates an expected call of RemovePattern
func (mr *MockDatabaseMockRecorder) RemovePattern(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePattern", reflect.TypeOf((*MockDatabase)(nil).RemovePattern), arg0)
}

// RemovePatternTriggerIDs mocks base method
func (m *MockDatabase) RemovePatternTriggerIDs(arg0 string) error {
	ret := m.ctrl.Call(m, "RemovePatternTriggerIDs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternTriggerIDs indicates an expected call of RemovePatternTriggerIDs
func (mr *MockDatabaseMockRecorder) RemovePatternTriggerIDs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).RemovePatternTriggerIDs), arg0)
}

// RemovePatternWithMetrics mocks base method
func (m *MockDatabase) RemovePatternWithMetrics(arg0 string) error {
	ret := m.ctrl.Call(m, "RemovePatternWithMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternWithMetrics indicates an expected call of RemovePatternWithMetrics
func (mr *MockDatabaseMockRecorder) RemovePatternWithMetrics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternWithMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternWithMetrics), arg0)
}

// RemovePatternsMetrics mocks base method
func (m *MockDatabase) RemovePatternsMetrics(arg0 []string) error {
	ret := m.ctrl.Call(m, "RemovePatternsMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternsMetrics indicates an expected call of RemovePatternsMetrics
func (mr *MockDatabaseMockRecorder) RemovePatternsMetrics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternsMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternsMetrics), arg0)
}

// RemoveSubscription mocks base method
func (m *MockDatabase) RemoveSubscription(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription
func (mr *MockDatabaseMockRecorder) RemoveSubscription(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockDatabase)(nil).RemoveSubscription), arg0)
}

// RemoveTag mocks base method
func (m *MockDatabase) RemoveTag(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag
func (mr *MockDatabaseMockRecorder) RemoveTag(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockDatabase)(nil).RemoveTag), arg0)
}

// RemoveTrigger mocks base method
func (m *MockDatabase) RemoveTrigger(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveTrigger", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrigger indicates an expected call of RemoveTrigger
func (mr *MockDatabaseMockRecorder) RemoveTrigger(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrigger", reflect.TypeOf((*MockDatabase)(nil).RemoveTrigger), arg0)
}

// RemoveTriggerLastCheck mocks base method
func (m *MockDatabase) RemoveTriggerLastCheck(arg0 string) error {
	ret := m.ctrl.Call(m, "RemoveTriggerLastCheck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTriggerLastCheck indicates an expected call of RemoveTriggerLastCheck
func (mr *MockDatabaseMockRecorder) RemoveTriggerLastCheck(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).RemoveTriggerLastCheck), arg0)
}

// RemoveUser mocks base method
func (m *MockDatabase) RemoveUser(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockDatabaseMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDatabase)(nil).RemoveUser), arg0, arg1)
}

// RenewBotRegistration mocks base method
func (m *MockDatabase) RenewBotRegistration(arg0 string) bool {
	ret := m.ctrl.Call(m, "RenewBotRegistration", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RenewBotRegistration indicates an expected call of RenewBotRegistration
func (mr *MockDatabaseMockRecorder) RenewBotRegistration(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewBotRegistration", reflect.TypeOf((*MockDatabase)(nil).RenewBotRegistration), arg0)
}

// SaveContact mocks base method
func (m *MockDatabase) SaveContact(arg0 *moira.ContactData) error {
	ret := m.ctrl.Call(m, "SaveContact", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContact indicates an expected call of SaveContact
func (mr *MockDatabaseMockRecorder) SaveContact(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContact", reflect.TypeOf((*MockDatabase)(nil).SaveContact), arg0)
}

// SaveMetrics mocks base method
func (m *MockDatabase) SaveMetrics(arg0 map[string]*moira.MatchedMetric) error {
	ret := m.ctrl.Call(m, "SaveMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics
func (mr *MockDatabaseMockRecorder) SaveMetrics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockDatabase)(nil).SaveMetrics), arg0)
}

// SaveSubscription mocks base method
func (m *MockDatabase) SaveSubscription(arg0 *moira.SubscriptionData) error {
	ret := m.ctrl.Call(m, "SaveSubscription", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription
func (mr *MockDatabaseMockRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockDatabase)(nil).SaveSubscription), arg0)
}

// SaveSubscriptions mocks base method
func (m *MockDatabase) SaveSubscriptions(arg0 []*moira.SubscriptionData) error {
	ret := m.ctrl.Call(m, "SaveSubscriptions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscriptions indicates an expected call of SaveSubscriptions
func (mr *MockDatabaseMockRecorder) SaveSubscriptions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscriptions", reflect.TypeOf((*MockDatabase)(nil).SaveSubscriptions), arg0)
}

// SaveTrigger mocks base method
func (m *MockDatabase) SaveTrigger(arg0 string, arg1 *moira.Trigger) error {
	ret := m.ctrl.Call(m, "SaveTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrigger indicates an expected call of SaveTrigger
func (mr *MockDatabaseMockRecorder) SaveTrigger(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrigger", reflect.TypeOf((*MockDatabase)(nil).SaveTrigger), arg0, arg1)
}

// SetNotifierState mocks base method
func (m *MockDatabase) SetNotifierState(arg0 string) error {
	ret := m.ctrl.Call(m, "SetNotifierState", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNotifierState indicates an expected call of SetNotifierState
func (mr *MockDatabaseMockRecorder) SetNotifierState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotifierState", reflect.TypeOf((*MockDatabase)(nil).SetNotifierState), arg0)
}

// SetTriggerCheckLock mocks base method
func (m *MockDatabase) SetTriggerCheckLock(arg0 string) (bool, error) {
	ret := m.ctrl.Call(m, "SetTriggerCheckLock", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTriggerCheckLock indicates an expected call of SetTriggerCheckLock
func (mr *MockDatabaseMockRecorder) SetTriggerCheckLock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCheckLock), arg0)
}

// SetTriggerCheckMetricsMaintenance mocks base method
func (m *MockDatabase) SetTriggerCheckMetricsMaintenance(arg0 string, arg1 map[string]int64) error {
	ret := m.ctrl.Call(m, "SetTriggerCheckMetricsMaintenance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerCheckMetricsMaintenance indicates an expected call of SetTriggerCheckMetricsMaintenance
func (mr *MockDatabaseMockRecorder) SetTriggerCheckMetricsMaintenance(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCheckMetricsMaintenance", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCheckMetricsMaintenance), arg0, arg1)
}

// SetTriggerLastCheck mocks base method
func (m *MockDatabase) SetTriggerLastCheck(arg0 string, arg1 *moira.CheckData) error {
	ret := m.ctrl.Call(m, "SetTriggerLastCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerLastCheck indicates an expected call of SetTriggerLastCheck
func (mr *MockDatabaseMockRecorder) SetTriggerLastCheck(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).SetTriggerLastCheck), arg0, arg1)
}

// SetTriggerThrottling mocks base method
func (m *MockDatabase) SetTriggerThrottling(arg0 string, arg1 time.Time) error {
	ret := m.ctrl.Call(m, "SetTriggerThrottling", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerThrottling indicates an expected call of SetTriggerThrottling
func (mr *MockDatabaseMockRecorder) SetTriggerThrottling(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).SetTriggerThrottling), arg0, arg1)
}

// SetUsernameID mocks base method
func (m *MockDatabase) SetUsernameID(arg0, arg1, arg2 string) error {
	ret := m.ctrl.Call(m, "SetUsernameID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUsernameID indicates an expected call of SetUsernameID
func (mr *MockDatabaseMockRecorder) SetUsernameID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsernameID", reflect.TypeOf((*MockDatabase)(nil).SetUsernameID), arg0, arg1, arg2)
}

// SubscribeMetricEvents mocks base method
func (m *MockDatabase) SubscribeMetricEvents(arg0 *tomb_v2.Tomb) (<-chan *moira.MetricEvent, error) {
	ret := m.ctrl.Call(m, "SubscribeMetricEvents", arg0)
	ret0, _ := ret[0].(<-chan *moira.MetricEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeMetricEvents indicates an expected call of SubscribeMetricEvents
func (mr *MockDatabaseMockRecorder) SubscribeMetricEvents(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMetricEvents", reflect.TypeOf((*MockDatabase)(nil).SubscribeMetricEvents), arg0)
}

// UpdateMetricsHeartbeat mocks base method
func (m *MockDatabase) UpdateMetricsHeartbeat() error {
	ret := m.ctrl.Call(m, "UpdateMetricsHeartbeat")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetricsHeartbeat indicates an expected call of UpdateMetricsHeartbeat
func (mr *MockDatabaseMockRecorder) UpdateMetricsHeartbeat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsHeartbeat", reflect.TypeOf((*MockDatabase)(nil).UpdateMetricsHeartbeat))
}
