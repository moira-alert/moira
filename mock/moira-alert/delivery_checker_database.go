// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: DeliveryCheckerDatabase)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/delivery_checker_database.go -package=mock_moira_alert github.com/moira-alert/moira DeliveryCheckerDatabase
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeliveryCheckerDatabase is a mock of DeliveryCheckerDatabase interface.
type MockDeliveryCheckerDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryCheckerDatabaseMockRecorder
	isgomock struct{}
}

// MockDeliveryCheckerDatabaseMockRecorder is the mock recorder for MockDeliveryCheckerDatabase.
type MockDeliveryCheckerDatabaseMockRecorder struct {
	mock *MockDeliveryCheckerDatabase
}

// NewMockDeliveryCheckerDatabase creates a new mock instance.
func NewMockDeliveryCheckerDatabase(ctrl *gomock.Controller) *MockDeliveryCheckerDatabase {
	mock := &MockDeliveryCheckerDatabase{ctrl: ctrl}
	mock.recorder = &MockDeliveryCheckerDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryCheckerDatabase) EXPECT() *MockDeliveryCheckerDatabaseMockRecorder {
	return m.recorder
}

// AddDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) AddDeliveryChecksData(contactType string, timestamp int64, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeliveryChecksData", contactType, timestamp, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeliveryChecksData indicates an expected call of AddDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) AddDeliveryChecksData(contactType, timestamp, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).AddDeliveryChecksData), contactType, timestamp, data)
}

// GetDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) GetDeliveryChecksData(contactType, from, to string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryChecksData", contactType, from, to)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryChecksData indicates an expected call of GetDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) GetDeliveryChecksData(contactType, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).GetDeliveryChecksData), contactType, from, to)
}

// RemoveDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) RemoveDeliveryChecksData(contactType, from, to string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeliveryChecksData", contactType, from, to)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDeliveryChecksData indicates an expected call of RemoveDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) RemoveDeliveryChecksData(contactType, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).RemoveDeliveryChecksData), contactType, from, to)
}
