// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: Sender)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/sender.go -package=mock_moira_alert github.com/moira-alert/moira Sender
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"
	time "time"

	moira "github.com/moira-alert/moira"
	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
	isgomock struct{}
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockSender) Init(senderSettings any, logger moira.Logger, location *time.Location, dateTimeFormat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", senderSettings, logger, location, dateTimeFormat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockSenderMockRecorder) Init(senderSettings, logger, location, dateTimeFormat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockSender)(nil).Init), senderSettings, logger, location, dateTimeFormat)
}

// SendEvents mocks base method.
func (m *MockSender) SendEvents(events moira.NotificationEvents, contact moira.ContactData, trigger moira.TriggerData, plot [][]byte, throttled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvents", events, contact, trigger, plot, throttled)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvents indicates an expected call of SendEvents.
func (mr *MockSenderMockRecorder) SendEvents(events, contact, trigger, plot, throttled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvents", reflect.TypeOf((*MockSender)(nil).SendEvents), events, contact, trigger, plot, throttled)
}
