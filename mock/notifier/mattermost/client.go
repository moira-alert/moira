// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/senders/mattermost (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mock/notifier/mattermost/client.go -package=mock_mattermost github.com/moira-alert/moira/senders/mattermost Client
//

// Package mock_mattermost is a generated GoMock package.
package mock_mattermost

import (
	context "context"
	reflect "reflect"

	model "github.com/mattermost/mattermost/server/public/model"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockClient) CreatePost(ctx context.Context, post *model.Post) (*model.Post, *model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(*model.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockClientMockRecorder) CreatePost(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockClient)(nil).CreatePost), ctx, post)
}

// SetToken mocks base method.
func (m *MockClient) SetToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetToken", token)
}

// SetToken indicates an expected call of SetToken.
func (mr *MockClientMockRecorder) SetToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockClient)(nil).SetToken), token)
}

// UploadFile mocks base method.
func (m *MockClient) UploadFile(ctx context.Context, data []byte, channelId, filename string) (*model.FileUploadResponse, *model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, data, channelId, filename)
	ret0, _ := ret[0].(*model.FileUploadResponse)
	ret1, _ := ret[1].(*model.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockClientMockRecorder) UploadFile(ctx, data, channelId, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockClient)(nil).UploadFile), ctx, data, channelId, filename)
}
