// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/notifier (interfaces: Scheduler)

// Package mock_scheduler is a generated GoMock package.
package mock_scheduler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	moira "github.com/moira-alert/moira"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// ScheduleNotification mocks base method.
func (m *MockScheduler) ScheduleNotification(arg0 moira.SchedulerParams, arg1 moira.Logger) *moira.ScheduledNotification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNotification", arg0, arg1)
	ret0, _ := ret[0].(*moira.ScheduledNotification)
	return ret0
}

// ScheduleNotification indicates an expected call of ScheduleNotification.
func (mr *MockSchedulerMockRecorder) ScheduleNotification(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNotification", reflect.TypeOf((*MockScheduler)(nil).ScheduleNotification), arg0, arg1)
}
