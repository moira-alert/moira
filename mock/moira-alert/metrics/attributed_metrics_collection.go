// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/metrics (interfaces: AttributedMetricCollection)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/metrics/attributed_metrics_collection.go -package=mock_moira_alert github.com/moira-alert/moira/metrics AttributedMetricCollection
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"

	metrics "github.com/moira-alert/moira/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockAttributedMetricCollection is a mock of AttributedMetricCollection interface.
type MockAttributedMetricCollection struct {
	ctrl     *gomock.Controller
	recorder *MockAttributedMetricCollectionMockRecorder
	isgomock struct{}
}

// MockAttributedMetricCollectionMockRecorder is the mock recorder for MockAttributedMetricCollection.
type MockAttributedMetricCollectionMockRecorder struct {
	mock *MockAttributedMetricCollection
}

// NewMockAttributedMetricCollection creates a new mock instance.
func NewMockAttributedMetricCollection(ctrl *gomock.Controller) *MockAttributedMetricCollection {
	mock := &MockAttributedMetricCollection{ctrl: ctrl}
	mock.recorder = &MockAttributedMetricCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAttributedMetricCollection) EXPECT() *MockAttributedMetricCollectionMockRecorder {
	return m.recorder
}

// GetRegisteredMeter mocks base method.
func (m *MockAttributedMetricCollection) GetRegisteredMeter(name string) (metrics.Meter, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredMeter", name)
	ret0, _ := ret[0].(metrics.Meter)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRegisteredMeter indicates an expected call of GetRegisteredMeter.
func (mr *MockAttributedMetricCollectionMockRecorder) GetRegisteredMeter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMeter", reflect.TypeOf((*MockAttributedMetricCollection)(nil).GetRegisteredMeter), name)
}

// RegisterMeter mocks base method.
func (m *MockAttributedMetricCollection) RegisterMeter(name, metric string, attributes metrics.Attributes) (metrics.Meter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMeter", name, metric, attributes)
	ret0, _ := ret[0].(metrics.Meter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterMeter indicates an expected call of RegisterMeter.
func (mr *MockAttributedMetricCollectionMockRecorder) RegisterMeter(name, metric, attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMeter", reflect.TypeOf((*MockAttributedMetricCollection)(nil).RegisterMeter), name, metric, attributes)
}
