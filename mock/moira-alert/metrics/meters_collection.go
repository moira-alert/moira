// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/metrics (interfaces: MetersCollection)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/metrics/meters_collection.go -package=mock_moira_alert github.com/moira-alert/moira/metrics MetersCollection
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"

	metrics "github.com/moira-alert/moira/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMetersCollection is a mock of MetersCollection interface.
type MockMetersCollection struct {
	ctrl     *gomock.Controller
	recorder *MockMetersCollectionMockRecorder
	isgomock struct{}
}

// MockMetersCollectionMockRecorder is the mock recorder for MockMetersCollection.
type MockMetersCollectionMockRecorder struct {
	mock *MockMetersCollection
}

// NewMockMetersCollection creates a new mock instance.
func NewMockMetersCollection(ctrl *gomock.Controller) *MockMetersCollection {
	mock := &MockMetersCollection{ctrl: ctrl}
	mock.recorder = &MockMetersCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetersCollection) EXPECT() *MockMetersCollectionMockRecorder {
	return m.recorder
}

// GetRegisteredMeter mocks base method.
func (m *MockMetersCollection) GetRegisteredMeter(name string) (metrics.Meter, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredMeter", name)
	ret0, _ := ret[0].(metrics.Meter)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRegisteredMeter indicates an expected call of GetRegisteredMeter.
func (mr *MockMetersCollectionMockRecorder) GetRegisteredMeter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredMeter", reflect.TypeOf((*MockMetersCollection)(nil).GetRegisteredMeter), name)
}

// RegisterMeter mocks base method.
func (m *MockMetersCollection) RegisterMeter(name string, path ...string) metrics.Meter {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range path {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterMeter", varargs...)
	ret0, _ := ret[0].(metrics.Meter)
	return ret0
}

// RegisterMeter indicates an expected call of RegisterMeter.
func (mr *MockMetersCollectionMockRecorder) RegisterMeter(name any, path ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, path...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMeter", reflect.TypeOf((*MockMetersCollection)(nil).RegisterMeter), varargs...)
}
