// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/metrics (interfaces: MetricRegistry)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/metrics/attributed_registry.go -package=mock_moira_alert github.com/moira-alert/moira/metrics MetricRegistry
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"

	metrics "github.com/moira-alert/moira/metrics"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricRegistry is a mock of MetricRegistry interface.
type MockMetricRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRegistryMockRecorder
	isgomock struct{}
}

// MockMetricRegistryMockRecorder is the mock recorder for MockMetricRegistry.
type MockMetricRegistryMockRecorder struct {
	mock *MockMetricRegistry
}

// NewMockMetricRegistry creates a new mock instance.
func NewMockMetricRegistry(ctrl *gomock.Controller) *MockMetricRegistry {
	mock := &MockMetricRegistry{ctrl: ctrl}
	mock.recorder = &MockMetricRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricRegistry) EXPECT() *MockMetricRegistryMockRecorder {
	return m.recorder
}

// NewCounter mocks base method.
func (m *MockMetricRegistry) NewCounter(name string) metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCounter", name)
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// NewCounter indicates an expected call of NewCounter.
func (mr *MockMetricRegistryMockRecorder) NewCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCounter", reflect.TypeOf((*MockMetricRegistry)(nil).NewCounter), name)
}

// NewGauge mocks base method.
func (m *MockMetricRegistry) NewGauge(name string) metrics.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGauge", name)
	ret0, _ := ret[0].(metrics.Meter)
	return ret0
}

// NewGauge indicates an expected call of NewGauge.
func (mr *MockMetricRegistryMockRecorder) NewGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGauge", reflect.TypeOf((*MockMetricRegistry)(nil).NewGauge), name)
}

// NewHistogram mocks base method.
func (m *MockMetricRegistry) NewHistogram(name string) metrics.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHistogram", name)
	ret0, _ := ret[0].(metrics.Histogram)
	return ret0
}

// NewHistogram indicates an expected call of NewHistogram.
func (mr *MockMetricRegistryMockRecorder) NewHistogram(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHistogram", reflect.TypeOf((*MockMetricRegistry)(nil).NewHistogram), name)
}

// NewTimer mocks base method.
func (m *MockMetricRegistry) NewTimer(name string) metrics.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTimer", name)
	ret0, _ := ret[0].(metrics.Timer)
	return ret0
}

// NewTimer indicates an expected call of NewTimer.
func (mr *MockMetricRegistryMockRecorder) NewTimer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTimer", reflect.TypeOf((*MockMetricRegistry)(nil).NewTimer), name)
}

// WithAttributes mocks base method.
func (m *MockMetricRegistry) WithAttributes(attributes metrics.Attributes) metrics.MetricRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAttributes", attributes)
	ret0, _ := ret[0].(metrics.MetricRegistry)
	return ret0
}

// WithAttributes indicates an expected call of WithAttributes.
func (mr *MockMetricRegistryMockRecorder) WithAttributes(attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAttributes", reflect.TypeOf((*MockMetricRegistry)(nil).WithAttributes), attributes)
}
