// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Contact Moira Team",
            "email": "opensource@skbkontur.com"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get available configuration",
                "operationId": "get-web-config",
                "responses": {
                    "200": {
                        "description": "Configuration fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.ConfigurationResponse"
                        }
                    }
                }
            }
        },
        "/contact": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Gets all Moira contacts",
                "operationId": "get-all-contacts",
                "responses": {
                    "200": {
                        "description": "Contacts fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ContactList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Creates a new contact notification for the current user",
                "operationId": "create-new-contact",
                "parameters": [
                    {
                        "description": "Contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/contact/{contactID}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Get contact by ID",
                "operationId": "get-contact-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Contact ID",
                        "name": "contactID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully received contact",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Updates an existing notification contact to the values passed in the request body",
                "operationId": "update-contact",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the contact to update",
                        "name": "contactID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated contact",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Deletes notification contact for the current user and remove the contact ID from all subscriptions",
                "operationId": "remove-contact",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the contact to remove",
                        "name": "contactID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contact has been deleted"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/contact/{contactID}/events": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Get contact events by ID with time range",
                "operationId": "get-contact-events-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Contact ID",
                        "name": "contactID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "-3hour",
                        "description": "Start time of the time range",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "now",
                        "description": "End time of the time range",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully received contact events",
                        "schema": {
                            "$ref": "#/definitions/dto.ContactEventItemList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/contact/{contactID}/test": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact"
                ],
                "summary": "Push a test notification to verify that the contact is properly set up",
                "operationId": "send-test-contact-notification",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of the target contact",
                        "name": "contactID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test successful"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/event/all": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Deletes all notification events",
                "operationId": "delete-all-events",
                "responses": {
                    "200": {
                        "description": "Events removed successfully"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/event/{triggerID}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "event"
                ],
                "summary": "Gets all trigger events for current page and their count",
                "operationId": "get-events-list",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of updated trigger",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 100,
                        "description": "Number of items to be displayed on one page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Defines the number of the displayed page. E.g, p=2 would display the 2nd page",
                        "name": "p",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.EventsList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/health/notifier": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Get notifier state",
                "operationId": "get-notifier-state",
                "responses": {
                    "200": {
                        "description": "Notifier state retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.NotifierState"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/notification": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Gets a paginated list of notifications, all notifications are fetched if end = -1 and start = 0",
                "operationId": "get-notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Default Value: 0",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": -1,
                        "description": "Default Value: -1",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.NotificationsList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notification"
                ],
                "summary": "Delete a notification by id",
                "operationId": "delete-notification",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of deleted notification",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification have been deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.NotificationDeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/pattern": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pattern"
                ],
                "summary": "Get all patterns",
                "operationId": "get-all-patterns",
                "responses": {
                    "200": {
                        "description": "Patterns fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.PatternList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/pattern/{pattern}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pattern"
                ],
                "summary": "Deletes a Moira pattern",
                "operationId": "delete-pattern",
                "parameters": [
                    {
                        "type": "string",
                        "default": "DevOps.my_server.hdd.freespace_mbytes",
                        "description": "Trigger pattern to operate on",
                        "name": "pattern",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pattern deleted successfully"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Get all subscriptions",
                "operationId": "get-user-subscriptions",
                "responses": {
                    "200": {
                        "description": "Subscriptions fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SubscriptionList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Create a new subscription",
                "operationId": "create-subscription",
                "parameters": [
                    {
                        "description": "Subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription/{subscriptionID}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Update a subscription",
                "operationId": "update-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to update",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Delete a subscription",
                "operationId": "remove-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to remove",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Subscription deleted"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/subscription/{subscriptionID}/test": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "Send a test notification for a subscription",
                "operationId": "send-test-notification",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the subscription to send the test notification",
                        "name": "subscriptionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test notification sent successfully"
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Get all tags",
                "operationId": "get-all-tags",
                "responses": {
                    "200": {
                        "description": "Tags fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TagsData"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag/stats": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Get all tags and their subscriptions",
                "operationId": "get-all-tags-and-subscriptions",
                "responses": {
                    "200": {
                        "description": "Successful",
                        "schema": {
                            "$ref": "#/definitions/dto.TagsStatistics"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/tag/{tag}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tag"
                ],
                "summary": "Remove a tag",
                "operationId": "remove-tag",
                "parameters": [
                    {
                        "type": "string",
                        "default": "cpu",
                        "description": "Name of the tag to remove",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag removed successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get all teams",
                "operationId": "get-all-teams",
                "responses": {
                    "200": {
                        "description": "Teams fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserTeams"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Create a new team",
                "operationId": "create-team",
                "parameters": [
                    {
                        "description": "Team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SaveTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get a team by ID",
                "operationId": "get-team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamModel"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Delete a team",
                "operationId": "delete-team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team has been successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.SaveTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Update existing team",
                "operationId": "update-team",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated team data",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SaveTeamResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/contacts": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teamContact"
                ],
                "summary": "Create a new team contact",
                "operationId": "create-new-team-contact",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Team contact data",
                        "name": "contact",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team contact created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Contact"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/settings": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get team settings",
                "operationId": "get-team-settings",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team settings",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamSettings"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/subscriptions": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teamSubscription"
                ],
                "summary": "Create a new team subscription",
                "operationId": "create-new-team-subscription",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "The ID of team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Team subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team subscription created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get users of a team",
                "operationId": "get-team-users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Set users of a team",
                "operationId": "set-team-users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usernames to set as team members",
                        "name": "usernames",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Add users to a team",
                "operationId": "add-team-users",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usernames to add to the team",
                        "name": "usernames",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/teams/{teamID}/users/{teamUserID}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Delete a user from a team",
                "operationId": "delete-team-user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "ID of the team",
                        "name": "teamID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "anonymous",
                        "description": "User login in methods related to teams manipulation",
                        "name": "teamUserID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TeamMembers"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorForbiddenExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get all triggers",
                "operationId": "get-all-triggers",
                "responses": {
                    "200": {
                        "description": "Fetched all triggers",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggersList"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Create a new trigger",
                "operationId": "create-trigger",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "For validating targets",
                        "name": "validate",
                        "in": "query"
                    },
                    {
                        "description": "Trigger data",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SaveTriggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    },
                    "503": {
                        "description": "Remote server unavailable",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRemoteServerUnavailableExample"
                        }
                    }
                }
            }
        },
        "/trigger/check": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Validates trigger target",
                "operationId": "trigger-check",
                "parameters": [
                    {
                        "description": "Trigger data",
                        "name": "trigger",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validation is done, see response body for validation result",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggerCheckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/pagers/{pagerID}": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Delete triggers pager",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Pager ID to delete",
                        "name": "pagerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted pager",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggersSearchResultDeleteResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/search": {
            "get": {
                "description": "You can also add filtering by tags, for this purpose add query parameters tags[0]=test, tags[1]=test1 and so on\nFor example, ` + "`" + `/api/trigger/search?tags[0]=test\u0026tags[1]=test1` + "`" + `",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Search triggers. Replaces the deprecated ` + "`" + `page` + "`" + ` path",
                "operationId": "search-triggers",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Only include problems",
                        "name": "onlyProblems",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "cpu",
                        "description": "Search text",
                        "name": "text",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Page number",
                        "name": "p",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Create pager",
                        "name": "createPager",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Pager ID",
                        "name": "pagerID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched matching triggers",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggersList"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get an existing trigger",
                "operationId": "get-trigger",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Populated",
                        "name": "populated",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger data",
                        "schema": {
                            "$ref": "#/definitions/dto.Trigger"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Update existing trigger",
                "operationId": "update-trigger",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "For validating targets",
                        "name": "validate",
                        "in": "query"
                    },
                    {
                        "description": "Trigger data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Trigger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated trigger",
                        "schema": {
                            "$ref": "#/definitions/dto.SaveTriggerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    },
                    "503": {
                        "description": "Remote server unavailable",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRemoteServerUnavailableExample"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "trigger"
                ],
                "summary": "Remove trigger",
                "operationId": "remove-trigger",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully removed"
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/dump": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get trigger dump",
                "operationId": "get-trigger-dump",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger dump",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggerDump"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/metrics": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get metrics associated with certain trigger",
                "operationId": "get-trigger-metrics",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "-10minutes",
                        "description": "Start time for metrics retrieval",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "now",
                        "description": "End time for metrics retrieval",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger metrics retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggerMetrics"
                        }
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Delete metric from last check and all trigger pattern metrics",
                "operationId": "delete-trigger-metric",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "DevOps.my_server.hdd.freespace_mbytes",
                        "description": "Name of the target metric",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger metric deleted successfully"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/metrics/nodata": {
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Delete all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics",
                "operationId": "delete-trigger-nodata-metrics",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger nodata metrics deleted successfully"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/render": {
            "get": {
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Render trigger metrics plot",
                "operationId": "render-trigger-metrics",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "t1",
                        "description": "Target metric name",
                        "name": "target",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "-1hour",
                        "description": "Start time for metrics retrieval",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "now",
                        "description": "End time for metrics retrieval",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "UTC",
                        "description": "Timezone for rendering",
                        "name": "timezone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "light",
                        "description": "Plot theme",
                        "name": "theme",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Fetch real-time data",
                        "name": "realtime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Rendered plot image successfully"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/setMaintenance": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Set metrics and the trigger itself to maintenance mode",
                "operationId": "set-trigger-maintenance",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Maintenance data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TriggerMaintenance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger or metric have been scheduled for maintenance"
                    },
                    "400": {
                        "description": "Bad request from client",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInvalidRequestExample"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/state": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get the trigger state as at last check",
                "operationId": "get-trigger-state",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger state fetched successful",
                        "schema": {
                            "$ref": "#/definitions/dto.TriggerCheck"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/trigger/{triggerID}/throttling": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trigger"
                ],
                "summary": "Get a trigger with its throttling i.e its next allowed message time",
                "operationId": "get-trigger-throttling",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger throttle info retrieved",
                        "schema": {
                            "$ref": "#/definitions/dto.ThrottlingResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "trigger"
                ],
                "summary": "Deletes throttling for a trigger",
                "operationId": "delete-trigger-throttling",
                "parameters": [
                    {
                        "type": "string",
                        "default": "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c",
                        "description": "Trigger ID",
                        "name": "triggerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trigger throttling has been deleted"
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorNotFoundExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Gets the username of the authenticated user if it is available",
                "operationId": "get-user-name",
                "responses": {
                    "200": {
                        "description": "User name fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.User"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    }
                }
            }
        },
        "/user/settings": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get the user's contacts and subscriptions",
                "operationId": "get-user-settings",
                "responses": {
                    "200": {
                        "description": "Settings fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSettings"
                        }
                    },
                    "422": {
                        "description": "Render error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorRenderExample"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorInternalServerExample"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorForbiddenExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "you cannot access this resource"
                },
                "status": {
                    "type": "string",
                    "example": "Forbidden"
                }
            }
        },
        "api.ErrorInternalServerExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "server error during request handling"
                },
                "status": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "api.ErrorInvalidRequestExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "resource with the ID does not exist"
                },
                "status": {
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "api.ErrorNotFoundExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "resource with ID '66741a8c-c2ba-4357-a2c9-ee78e0e7' does not exist"
                },
                "status": {
                    "type": "string",
                    "example": "Resource not found"
                }
            }
        },
        "api.ErrorRemoteServerUnavailableExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Remote server error, please contact administrator"
                },
                "status": {
                    "type": "string",
                    "example": "Remote server unavailable"
                }
            }
        },
        "api.ErrorRenderExample": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "rendering error"
                },
                "status": {
                    "type": "string",
                    "example": "Error rendering response"
                }
            }
        },
        "dto.Contact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1dd38765-c5be-418d-81fa-7a5f879c2315"
                },
                "team_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "mail"
                },
                "user": {
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "example": "devops@example.com"
                }
            }
        },
        "dto.ContactEventItem": {
            "type": "object",
            "properties": {
                "metric": {
                    "type": "string"
                },
                "old_state": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "trigger_id": {
                    "type": "string"
                }
            }
        },
        "dto.ContactEventItemList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ContactEventItem"
                    }
                }
            }
        },
        "dto.ContactList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ContactData"
                    }
                }
            }
        },
        "dto.EventsList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.NotificationEvent"
                    }
                },
                "page": {
                    "type": "integer",
                    "example": 0
                },
                "size": {
                    "type": "integer",
                    "example": 100
                },
                "total": {
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "dto.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "tag deleted"
                }
            }
        },
        "dto.NotificationDeleteResponse": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.NotificationsList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ScheduledNotification"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.NotifierState": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Moira has been turned off for maintenance"
                },
                "state": {
                    "type": "string",
                    "example": "ERROR"
                }
            }
        },
        "dto.PatternData": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "DevOps.my_server.hdd.freespace_mbytes",
                        " DevOps.my_server.hdd.freespace_mbytes",
                        " DevOps.my_server.db.*"
                    ]
                },
                "pattern": {
                    "type": "string",
                    "example": "Devops.my_server.*"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TriggerModel"
                    }
                }
            }
        },
        "dto.PatternList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PatternData"
                    }
                }
            }
        },
        "dto.PatternMetrics": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/moira.MetricValue"
                        }
                    }
                },
                "pattern": {
                    "type": "string"
                },
                "retention": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "dto.ProblemOfTarget": {
            "type": "object",
            "properties": {
                "argument": {
                    "type": "string",
                    "example": "consolidateBy"
                },
                "description": {
                    "type": "string",
                    "example": "This function affects only visual graph representation. It is meaningless in Moira"
                },
                "position": {
                    "type": "integer",
                    "example": 0
                },
                "problems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProblemOfTarget"
                    }
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.typeOfProblem"
                        }
                    ],
                    "example": "warn"
                }
            }
        },
        "dto.SaveTeamResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "d5d98eb3-ee18-4f75-9364-244f67e23b54"
                }
            }
        },
        "dto.SaveTriggerResponse": {
            "type": "object",
            "properties": {
                "checkResult": {
                    "$ref": "#/definitions/dto.TriggerCheckResponse"
                },
                "id": {
                    "type": "string",
                    "example": "trigger_id"
                },
                "message": {
                    "type": "string",
                    "example": "trigger created"
                }
            }
        },
        "dto.Subscription": {
            "type": "object",
            "properties": {
                "any_tags": {
                    "type": "boolean",
                    "example": false
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "acd2db98-1659-4a2f-b227-52d71f6e3ba1"
                    ]
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "ignore_recoverings": {
                    "type": "boolean",
                    "example": false
                },
                "ignore_warnings": {
                    "type": "boolean",
                    "example": false
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "cpu"
                    ]
                },
                "team_id": {
                    "type": "string",
                    "example": "324516ed-4924-4154-a62c-eb124234fce"
                },
                "throttling": {
                    "type": "boolean",
                    "example": false
                },
                "user": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "dto.SubscriptionList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                }
            }
        },
        "dto.TagStatistics": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "cpu"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "bcba82f5-48cf-44c0-b7d6-e1d32c64a88c"
                    ]
                }
            }
        },
        "dto.TagsData": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "cpu"
                    ]
                }
            }
        },
        "dto.TagsStatistics": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TagStatistics"
                    }
                }
            }
        },
        "dto.TeamMembers": {
            "type": "object",
            "properties": {
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "anonymous"
                    ]
                }
            }
        },
        "dto.TeamModel": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Team that holds all members of infrastructure division"
                },
                "id": {
                    "type": "string",
                    "example": "d5d98eb3-ee18-4f75-9364-244f67e23b54"
                },
                "name": {
                    "type": "string",
                    "example": "Infrastructure Team"
                }
            }
        },
        "dto.TeamSettings": {
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ContactData"
                    }
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                },
                "team_id": {
                    "type": "string",
                    "example": "d5d98eb3-ee18-4f75-9364-244f67e23b54"
                }
            }
        },
        "dto.ThrottlingResponse": {
            "type": "object",
            "properties": {
                "throttling": {
                    "type": "integer",
                    "example": 0
                }
            }
        },
        "dto.TreeOfProblems": {
            "type": "object",
            "properties": {
                "syntax_ok": {
                    "type": "boolean",
                    "example": true
                },
                "tree_of_problems": {
                    "$ref": "#/definitions/dto.ProblemOfTarget"
                }
            }
        },
        "dto.Trigger": {
            "type": "object",
            "properties": {
                "alone_metrics": {
                    "description": "A list of targets that have only alone metrics",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "t1": true
                    }
                },
                "created_at": {
                    "description": "Datetime when the trigger was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "Username who created trigger",
                    "type": "string"
                },
                "desc": {
                    "description": "Description string",
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "description": "ERROR threshold",
                    "type": "number",
                    "example": 1000
                },
                "expression": {
                    "description": "Used if you need more complex logic than provided by WARN/ERROR values",
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "description": "Trigger unique ID",
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "description": "Shows if trigger is remote (graphite-backend) based or stored inside Moira-Redis DB",
                    "type": "boolean",
                    "example": false
                },
                "mute_new_metrics": {
                    "description": "If true, first event NODATA → OK will be omitted",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Trigger name",
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "patterns": {
                    "description": "Graphite patterns for trigger",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "sched": {
                    "description": "Determines when Moira should monitor trigger",
                    "allOf": [
                        {
                            "$ref": "#/definitions/moira.ScheduleData"
                        }
                    ]
                },
                "tags": {
                    "description": "Set of tags to manipulate subscriptions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "targets": {
                    "description": "Graphite-like targets: t1, t2, ...",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "throttling": {
                    "type": "integer",
                    "example": 0
                },
                "trigger_type": {
                    "description": "Could be: rising, falling, expression",
                    "type": "string",
                    "example": "rising"
                },
                "ttl": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "integer",
                    "example": 600
                },
                "ttl_state": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "string",
                    "example": "NODATA"
                },
                "updated_at": {
                    "description": "Datetime  when the trigger was updated",
                    "type": "string"
                },
                "updated_by": {
                    "description": "Username who updated trigger",
                    "type": "string"
                },
                "warn_value": {
                    "description": "WARN threshold",
                    "type": "number",
                    "example": 500
                }
            }
        },
        "dto.TriggerCheck": {
            "type": "object",
            "properties": {
                "event_timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "last_successful_check_timestamp": {
                    "type": "integer",
                    "example": 1590741916
                },
                "maintenance": {
                    "type": "integer",
                    "example": 0
                },
                "maintenance_info": {
                    "$ref": "#/definitions/moira.MaintenanceInfo"
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/moira.MetricState"
                    }
                },
                "metrics_to_target_relation": {
                    "description": "MetricsToTargetRelation is a map that holds relation between metric names that was alone during last\ncheck and targets that fetched this metric\n\t{\"t1\": \"metric.name.1\", \"t2\": \"metric.name.2\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "t1": "metric.name.1",
                        "t2": "metric.name.2"
                    }
                },
                "msg": {
                    "type": "string"
                },
                "score": {
                    "type": "integer",
                    "example": 100
                },
                "state": {
                    "type": "string",
                    "example": "OK"
                },
                "suppressed": {
                    "type": "boolean",
                    "example": true
                },
                "suppressed_state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1590741916
                },
                "trigger_id": {
                    "type": "string",
                    "example": "trigger_id"
                }
            }
        },
        "dto.TriggerCheckResponse": {
            "type": "object",
            "properties": {
                "targets": {
                    "description": "Graphite-like targets: t1, t2, ...",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TreeOfProblems"
                    }
                }
            }
        },
        "dto.TriggerDump": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "last_check": {
                    "$ref": "#/definitions/moira.CheckData"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PatternMetrics"
                    }
                },
                "trigger": {
                    "$ref": "#/definitions/moira.Trigger"
                }
            }
        },
        "dto.TriggerMaintenance": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "trigger": {
                    "type": "integer",
                    "example": 1594225165
                }
            }
        },
        "dto.TriggerMetrics": {
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.MetricValue"
                    }
                }
            }
        },
        "dto.TriggerModel": {
            "type": "object",
            "properties": {
                "alone_metrics": {
                    "description": "A list of targets that have only alone metrics",
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "t1": true
                    }
                },
                "created_at": {
                    "description": "Datetime when the trigger was created",
                    "type": "string"
                },
                "created_by": {
                    "description": "Username who created trigger",
                    "type": "string"
                },
                "desc": {
                    "description": "Description string",
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "description": "ERROR threshold",
                    "type": "number",
                    "example": 1000
                },
                "expression": {
                    "description": "Used if you need more complex logic than provided by WARN/ERROR values",
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "description": "Trigger unique ID",
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "description": "Shows if trigger is remote (graphite-backend) based or stored inside Moira-Redis DB",
                    "type": "boolean",
                    "example": false
                },
                "mute_new_metrics": {
                    "description": "If true, first event NODATA → OK will be omitted",
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "description": "Trigger name",
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "patterns": {
                    "description": "Graphite patterns for trigger",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "sched": {
                    "description": "Determines when Moira should monitor trigger",
                    "allOf": [
                        {
                            "$ref": "#/definitions/moira.ScheduleData"
                        }
                    ]
                },
                "tags": {
                    "description": "Set of tags to manipulate subscriptions",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "targets": {
                    "description": "Graphite-like targets: t1, t2, ...",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "trigger_type": {
                    "description": "Could be: rising, falling, expression",
                    "type": "string",
                    "example": "rising"
                },
                "ttl": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "integer",
                    "example": 600
                },
                "ttl_state": {
                    "description": "When there are no metrics for trigger, Moira will switch metric to TTLState state after TTL seconds",
                    "type": "string",
                    "example": "NODATA"
                },
                "updated_at": {
                    "description": "Datetime  when the trigger was updated",
                    "type": "string"
                },
                "updated_by": {
                    "description": "Username who updated trigger",
                    "type": "string"
                },
                "warn_value": {
                    "description": "WARN threshold",
                    "type": "number",
                    "example": 500
                }
            }
        },
        "dto.TriggersList": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.TriggerCheck"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pager": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.TriggersSearchResultDeleteResponse": {
            "type": "object",
            "properties": {
                "pager_id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                }
            }
        },
        "dto.User": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "john"
                }
            }
        },
        "dto.UserSettings": {
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ContactData"
                    }
                },
                "login": {
                    "type": "string",
                    "example": "john"
                },
                "subscriptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.SubscriptionData"
                    }
                }
            }
        },
        "dto.UserTeams": {
            "type": "object",
            "properties": {
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TeamModel"
                    }
                }
            }
        },
        "dto.typeOfProblem": {
            "type": "string",
            "enum": [
                "warn",
                "bad"
            ],
            "x-enum-varnames": [
                "isWarn",
                "isBad"
            ]
        },
        "handler.ConfigurationResponse": {
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handler.ContactExample"
                    }
                },
                "remoteAllowed": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "handler.ContactExample": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "example": "Telegram"
                },
                "type": {
                    "type": "string",
                    "example": "telegram"
                }
            }
        },
        "moira.CheckData": {
            "type": "object",
            "properties": {
                "event_timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "last_successful_check_timestamp": {
                    "type": "integer",
                    "example": 1590741916
                },
                "maintenance": {
                    "type": "integer",
                    "example": 0
                },
                "maintenance_info": {
                    "$ref": "#/definitions/moira.MaintenanceInfo"
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/moira.MetricState"
                    }
                },
                "metrics_to_target_relation": {
                    "description": "MetricsToTargetRelation is a map that holds relation between metric names that was alone during last\ncheck and targets that fetched this metric\n\t{\"t1\": \"metric.name.1\", \"t2\": \"metric.name.2\"}",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "t1": "metric.name.1",
                        "t2": "metric.name.2"
                    }
                },
                "msg": {
                    "type": "string"
                },
                "score": {
                    "type": "integer",
                    "example": 100
                },
                "state": {
                    "type": "string",
                    "example": "OK"
                },
                "suppressed": {
                    "type": "boolean",
                    "example": true
                },
                "suppressed_state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1590741916
                }
            }
        },
        "moira.ContactData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1dd38765-c5be-418d-81fa-7a5f879c2315"
                },
                "team": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "example": "mail"
                },
                "user": {
                    "type": "string",
                    "example": ""
                },
                "value": {
                    "type": "string",
                    "example": "devops@example.com"
                }
            }
        },
        "moira.EventInfo": {
            "type": "object",
            "properties": {
                "interval": {
                    "type": "integer",
                    "example": 0
                },
                "maintenance": {
                    "$ref": "#/definitions/moira.MaintenanceInfo"
                }
            }
        },
        "moira.MaintenanceInfo": {
            "type": "object",
            "properties": {
                "remove_time": {
                    "type": "integer",
                    "example": 0
                },
                "remove_user": {
                    "type": "string"
                },
                "setup_time": {
                    "type": "integer",
                    "example": 0
                },
                "setup_user": {
                    "type": "string"
                }
            }
        },
        "moira.MetricState": {
            "type": "object",
            "properties": {
                "event_timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "maintenance": {
                    "type": "integer",
                    "example": 0
                },
                "maintenance_info": {
                    "$ref": "#/definitions/moira.MaintenanceInfo"
                },
                "state": {
                    "type": "string",
                    "example": "OK"
                },
                "suppressed": {
                    "type": "boolean",
                    "example": false
                },
                "suppressed_state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "value": {
                    "type": "number",
                    "example": 70
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "moira.MetricValue": {
            "type": "object",
            "properties": {
                "step": {
                    "type": "integer"
                },
                "ts": {
                    "type": "integer"
                },
                "value": {
                    "type": "number"
                }
            }
        },
        "moira.NotificationEvent": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string"
                },
                "event_message": {
                    "$ref": "#/definitions/moira.EventInfo"
                },
                "metric": {
                    "type": "string",
                    "example": "carbon.agents.*.metricsReceived"
                },
                "msg": {
                    "type": "string"
                },
                "old_state": {
                    "type": "string",
                    "example": "ERROR"
                },
                "state": {
                    "type": "string",
                    "example": "OK"
                },
                "sub_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1590741878
                },
                "trigger_event": {
                    "type": "boolean",
                    "example": true
                },
                "trigger_id": {
                    "type": "string",
                    "example": "5ff37996-8927-4cab-8987-970e80d8e0a8"
                },
                "value": {
                    "type": "number",
                    "example": 70
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                }
            }
        },
        "moira.PlottingData": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "theme": {
                    "type": "string",
                    "example": "dark"
                }
            }
        },
        "moira.ScheduleData": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/moira.ScheduleDataDay"
                    }
                },
                "endOffset": {
                    "type": "integer",
                    "example": 1439
                },
                "startOffset": {
                    "type": "integer",
                    "example": 0
                },
                "tzOffset": {
                    "type": "integer",
                    "example": -60
                }
            }
        },
        "moira.ScheduleDataDay": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Mon"
                }
            }
        },
        "moira.ScheduledNotification": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/moira.ContactData"
                },
                "event": {
                    "$ref": "#/definitions/moira.NotificationEvent"
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "send_fail": {
                    "type": "integer",
                    "example": 0
                },
                "throttled": {
                    "type": "boolean",
                    "example": false
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1594471927
                },
                "trigger": {
                    "$ref": "#/definitions/moira.TriggerData"
                }
            }
        },
        "moira.SubscriptionData": {
            "type": "object",
            "properties": {
                "any_tags": {
                    "type": "boolean",
                    "example": false
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "acd2db98-1659-4a2f-b227-52d71f6e3ba1"
                    ]
                },
                "enabled": {
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "ignore_recoverings": {
                    "type": "boolean",
                    "example": false
                },
                "ignore_warnings": {
                    "type": "boolean",
                    "example": false
                },
                "plotting": {
                    "$ref": "#/definitions/moira.PlottingData"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "cpu"
                    ]
                },
                "team_id": {
                    "type": "string",
                    "example": "324516ed-4924-4154-a62c-eb124234fce"
                },
                "throttling": {
                    "type": "boolean",
                    "example": false
                },
                "user": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "moira.Trigger": {
            "type": "object",
            "properties": {
                "alone_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "t1": true
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "desc": {
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "type": "number",
                    "example": 1000
                },
                "expression": {
                    "type": "string",
                    "example": ""
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "type": "boolean",
                    "example": false
                },
                "mute_new_metrics": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "python_expression": {
                    "type": "string"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "trigger_type": {
                    "type": "string",
                    "example": "rising"
                },
                "ttl": {
                    "type": "integer",
                    "example": 600
                },
                "ttl_state": {
                    "type": "string",
                    "example": "NODATA"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "warn_value": {
                    "type": "number",
                    "example": 5000
                }
            }
        },
        "moira.TriggerCheck": {
            "type": "object",
            "properties": {
                "alone_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "example": {
                        "t1": true
                    }
                },
                "created_at": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "desc": {
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "type": "number",
                    "example": 1000
                },
                "expression": {
                    "type": "string",
                    "example": ""
                },
                "highlights": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "type": "boolean",
                    "example": false
                },
                "last_check": {
                    "$ref": "#/definitions/moira.CheckData"
                },
                "mute_new_metrics": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        ""
                    ]
                },
                "python_expression": {
                    "type": "string"
                },
                "sched": {
                    "$ref": "#/definitions/moira.ScheduleData"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "throttling": {
                    "type": "integer",
                    "example": 0
                },
                "trigger_type": {
                    "type": "string",
                    "example": "rising"
                },
                "ttl": {
                    "type": "integer",
                    "example": 600
                },
                "ttl_state": {
                    "type": "string",
                    "example": "NODATA"
                },
                "updated_at": {
                    "type": "integer"
                },
                "updated_by": {
                    "type": "string"
                },
                "warn_value": {
                    "type": "number",
                    "example": 5000
                }
            }
        },
        "moira.TriggerData": {
            "type": "object",
            "properties": {
                "__notifier_trigger_tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "server",
                        "disk"
                    ]
                },
                "desc": {
                    "type": "string",
                    "example": "check the size of /var/log"
                },
                "error_value": {
                    "type": "number",
                    "example": 1000
                },
                "id": {
                    "type": "string",
                    "example": "292516ed-4924-4154-a62c-ebe312431fce"
                },
                "is_remote": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Not enough disk space left"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "devOps.my_server.hdd.freespace_mbytes"
                    ]
                },
                "warn_value": {
                    "type": "number",
                    "example": 5000
                }
            }
        }
    },
    "tags": [
        {
            "description": "APIs for working with Moira contacts. For more details, see \u003chttps://moira.readthedocs.io/en/latest/installation/webhooks_scripts.html#contact/\u003e",
            "name": "contact"
        },
        {
            "description": "View Moira's runtime configuration. For more details, see \u003chttps://moira.readthedocs.io/en/latest/installation/configuration.html\u003e",
            "name": "config"
        },
        {
            "description": "APIs for interacting with notification events. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/trigger_page.html#event-history/\u003e for details",
            "name": "event"
        },
        {
            "description": "interact with Moira states/health status. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/selfstate.html#self-state-monitor/\u003e for details",
            "name": "health"
        },
        {
            "description": "manage notifications that are currently in queue. See \u003chttps://moira.readthedocs.io/en/latest/user_guide/hidden_pages.html#notifications/\u003e",
            "name": "notification"
        },
        {
            "description": "APIs for interacting with graphite patterns in Moira. See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#pattern/\u003e",
            "name": "pattern"
        },
        {
            "description": "APIs for managing a user's subscription(s). See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#subscription/\u003e to learn about Moira subscriptions",
            "name": "subscription"
        },
        {
            "description": "APIs for managing tags (a grouping of tags and subscriptions). See \u003chttps://moira.readthedocs.io/en/latest/user_guide/subscriptions.html#tags/\u003e",
            "name": "tag"
        },
        {
            "description": "APIs for interacting with Moira triggers. See \u003chttps://moira.readthedocs.io/en/latest/development/architecture.html#trigger/\u003e to learn about Triggers",
            "name": "trigger"
        },
        {
            "description": "APIs for interacting with Moira teams",
            "name": "team"
        },
        {
            "description": "APIs for interacting with Moira subscriptions owned by certain team",
            "name": "teamSubscription"
        },
        {
            "description": "APIs for interacting with Moira contacts owned by certain team",
            "name": "teamContact"
        },
        {
            "description": "APIs for interacting with Moira users",
            "name": "user"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "master",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Moira Alert",
	Description:      "This is an API description for [Moira Alert API](https://moira.readthedocs.io/en/latest/overview.html)\nCheck us out on [Github](https://github.com/moira-alert) or look up our [guide on getting started with Moira](https://moira.readthedocs.io)",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
