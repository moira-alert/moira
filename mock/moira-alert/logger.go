// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: Logger)

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	moira "github.com/moira-alert/moira"
	logging "github.com/moira-alert/moira/logging"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockLogger) Clone() moira.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(moira.Logger)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockLoggerMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockLogger)(nil).Clone))
}

// Debugb mocks base method.
func (m *MockLogger) Debugb() logging.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debugb")
	ret0, _ := ret[0].(logging.EventBuilder)
	return ret0
}

// Debugb indicates an expected call of Debugb.
func (mr *MockLoggerMockRecorder) Debugb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugb", reflect.TypeOf((*MockLogger)(nil).Debugb))
}

// Errorb mocks base method.
func (m *MockLogger) Errorb() logging.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errorb")
	ret0, _ := ret[0].(logging.EventBuilder)
	return ret0
}

// Errorb indicates an expected call of Errorb.
func (mr *MockLoggerMockRecorder) Errorb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorb", reflect.TypeOf((*MockLogger)(nil).Errorb))
}

// Fatalb mocks base method.
func (m *MockLogger) Fatalb() logging.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatalb")
	ret0, _ := ret[0].(logging.EventBuilder)
	return ret0
}

// Fatalb indicates an expected call of Fatalb.
func (mr *MockLoggerMockRecorder) Fatalb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalb", reflect.TypeOf((*MockLogger)(nil).Fatalb))
}

// Fields mocks base method.
func (m *MockLogger) Fields(arg0 map[string]interface{}) moira.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fields", arg0)
	ret0, _ := ret[0].(moira.Logger)
	return ret0
}

// Fields indicates an expected call of Fields.
func (mr *MockLoggerMockRecorder) Fields(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockLogger)(nil).Fields), arg0)
}

// Infob mocks base method.
func (m *MockLogger) Infob() logging.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Infob")
	ret0, _ := ret[0].(logging.EventBuilder)
	return ret0
}

// Infob indicates an expected call of Infob.
func (mr *MockLoggerMockRecorder) Infob() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infob", reflect.TypeOf((*MockLogger)(nil).Infob))
}

// Int mocks base method.
func (m *MockLogger) Int(arg0 string, arg1 int) moira.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int", arg0, arg1)
	ret0, _ := ret[0].(moira.Logger)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockLoggerMockRecorder) Int(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockLogger)(nil).Int), arg0, arg1)
}

// Int64 mocks base method.
func (m *MockLogger) Int64(arg0 string, arg1 int64) moira.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Int64", arg0, arg1)
	ret0, _ := ret[0].(moira.Logger)
	return ret0
}

// Int64 indicates an expected call of Int64.
func (mr *MockLoggerMockRecorder) Int64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int64", reflect.TypeOf((*MockLogger)(nil).Int64), arg0, arg1)
}

// Level mocks base method.
func (m *MockLogger) Level(arg0 string) (moira.Logger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level", arg0)
	ret0, _ := ret[0].(moira.Logger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level indicates an expected call of Level.
func (mr *MockLoggerMockRecorder) Level(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockLogger)(nil).Level), arg0)
}

// String mocks base method.
func (m *MockLogger) String(arg0, arg1 string) moira.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", arg0, arg1)
	ret0, _ := ret[0].(moira.Logger)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockLoggerMockRecorder) String(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockLogger)(nil).String), arg0, arg1)
}

// Warningb mocks base method.
func (m *MockLogger) Warningb() logging.EventBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warningb")
	ret0, _ := ret[0].(logging.EventBuilder)
	return ret0
}

// Warningb indicates an expected call of Warningb.
func (mr *MockLoggerMockRecorder) Warningb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningb", reflect.TypeOf((*MockLogger)(nil).Warningb))
}
