// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: Database)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/database.go -package=mock_moira_alert github.com/moira-alert/moira Database
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"
	time "time"

	moira "github.com/moira-alert/moira"
	gomock "go.uber.org/mock/gomock"
	tomb "gopkg.in/tomb.v2"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AcquireTriggerCheckLock mocks base method.
func (m *MockDatabase) AcquireTriggerCheckLock(triggerID string, maxAttemptsCount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcquireTriggerCheckLock", triggerID, maxAttemptsCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcquireTriggerCheckLock indicates an expected call of AcquireTriggerCheckLock.
func (mr *MockDatabaseMockRecorder) AcquireTriggerCheckLock(triggerID, maxAttemptsCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcquireTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).AcquireTriggerCheckLock), triggerID, maxAttemptsCount)
}

// AddDeliveryChecksData mocks base method.
func (m *MockDatabase) AddDeliveryChecksData(contactType string, timestamp int64, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeliveryChecksData", contactType, timestamp, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeliveryChecksData indicates an expected call of AddDeliveryChecksData.
func (mr *MockDatabaseMockRecorder) AddDeliveryChecksData(contactType, timestamp, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryChecksData", reflect.TypeOf((*MockDatabase)(nil).AddDeliveryChecksData), contactType, timestamp, data)
}

// AddNotification mocks base method.
func (m *MockDatabase) AddNotification(notification *moira.ScheduledNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotification", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotification indicates an expected call of AddNotification.
func (mr *MockDatabaseMockRecorder) AddNotification(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotification", reflect.TypeOf((*MockDatabase)(nil).AddNotification), notification)
}

// AddNotifications mocks base method.
func (m *MockDatabase) AddNotifications(notification []*moira.ScheduledNotification, timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNotifications", notification, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNotifications indicates an expected call of AddNotifications.
func (mr *MockDatabaseMockRecorder) AddNotifications(notification, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNotifications", reflect.TypeOf((*MockDatabase)(nil).AddNotifications), notification, timestamp)
}

// AddPatternMetric mocks base method.
func (m *MockDatabase) AddPatternMetric(pattern, metric string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPatternMetric", pattern, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPatternMetric indicates an expected call of AddPatternMetric.
func (mr *MockDatabaseMockRecorder) AddPatternMetric(pattern, metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPatternMetric", reflect.TypeOf((*MockDatabase)(nil).AddPatternMetric), pattern, metric)
}

// AddTriggersToCheck mocks base method.
func (m *MockDatabase) AddTriggersToCheck(clusterKey moira.ClusterKey, triggerIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTriggersToCheck", clusterKey, triggerIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTriggersToCheck indicates an expected call of AddTriggersToCheck.
func (mr *MockDatabaseMockRecorder) AddTriggersToCheck(clusterKey, triggerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTriggersToCheck", reflect.TypeOf((*MockDatabase)(nil).AddTriggersToCheck), clusterKey, triggerIDs)
}

// CleanUpAbandonedRetentions mocks base method.
func (m *MockDatabase) CleanUpAbandonedRetentions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAbandonedRetentions")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpAbandonedRetentions indicates an expected call of CleanUpAbandonedRetentions.
func (mr *MockDatabaseMockRecorder) CleanUpAbandonedRetentions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAbandonedRetentions", reflect.TypeOf((*MockDatabase)(nil).CleanUpAbandonedRetentions))
}

// CleanUpAbandonedTags mocks base method.
func (m *MockDatabase) CleanUpAbandonedTags() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAbandonedTags")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanUpAbandonedTags indicates an expected call of CleanUpAbandonedTags.
func (mr *MockDatabaseMockRecorder) CleanUpAbandonedTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAbandonedTags", reflect.TypeOf((*MockDatabase)(nil).CleanUpAbandonedTags))
}

// CleanUpAbandonedTriggerLastCheck mocks base method.
func (m *MockDatabase) CleanUpAbandonedTriggerLastCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpAbandonedTriggerLastCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpAbandonedTriggerLastCheck indicates an expected call of CleanUpAbandonedTriggerLastCheck.
func (mr *MockDatabaseMockRecorder) CleanUpAbandonedTriggerLastCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpAbandonedTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).CleanUpAbandonedTriggerLastCheck))
}

// CleanUpFutureMetrics mocks base method.
func (m *MockDatabase) CleanUpFutureMetrics(duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpFutureMetrics", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpFutureMetrics indicates an expected call of CleanUpFutureMetrics.
func (mr *MockDatabaseMockRecorder) CleanUpFutureMetrics(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpFutureMetrics", reflect.TypeOf((*MockDatabase)(nil).CleanUpFutureMetrics), duration)
}

// CleanUpOutdatedMetrics mocks base method.
func (m *MockDatabase) CleanUpOutdatedMetrics(duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpOutdatedMetrics", duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpOutdatedMetrics indicates an expected call of CleanUpOutdatedMetrics.
func (mr *MockDatabaseMockRecorder) CleanUpOutdatedMetrics(duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpOutdatedMetrics", reflect.TypeOf((*MockDatabase)(nil).CleanUpOutdatedMetrics), duration)
}

// CleanUpOutdatedNotificationHistory mocks base method.
func (m *MockDatabase) CleanUpOutdatedNotificationHistory(ttl int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpOutdatedNotificationHistory", ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpOutdatedNotificationHistory indicates an expected call of CleanUpOutdatedNotificationHistory.
func (mr *MockDatabaseMockRecorder) CleanUpOutdatedNotificationHistory(ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpOutdatedNotificationHistory", reflect.TypeOf((*MockDatabase)(nil).CleanUpOutdatedNotificationHistory), ttl)
}

// CleanupOutdatedPatternMetrics mocks base method.
func (m *MockDatabase) CleanupOutdatedPatternMetrics() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupOutdatedPatternMetrics")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupOutdatedPatternMetrics indicates an expected call of CleanupOutdatedPatternMetrics.
func (mr *MockDatabaseMockRecorder) CleanupOutdatedPatternMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupOutdatedPatternMetrics", reflect.TypeOf((*MockDatabase)(nil).CleanupOutdatedPatternMetrics))
}

// CountEventsInNotificationHistory mocks base method.
func (m *MockDatabase) CountEventsInNotificationHistory(contactIDs []string, from, to string) ([]*moira.ContactIDWithNotificationCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEventsInNotificationHistory", contactIDs, from, to)
	ret0, _ := ret[0].([]*moira.ContactIDWithNotificationCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEventsInNotificationHistory indicates an expected call of CountEventsInNotificationHistory.
func (mr *MockDatabaseMockRecorder) CountEventsInNotificationHistory(contactIDs, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEventsInNotificationHistory", reflect.TypeOf((*MockDatabase)(nil).CountEventsInNotificationHistory), contactIDs, from, to)
}

// CreateTags mocks base method.
func (m *MockDatabase) CreateTags(tags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTags", tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags.
func (mr *MockDatabaseMockRecorder) CreateTags(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockDatabase)(nil).CreateTags), tags)
}

// DeleteTeam mocks base method.
func (m *MockDatabase) DeleteTeam(teamID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", teamID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockDatabaseMockRecorder) DeleteTeam(teamID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockDatabase)(nil).DeleteTeam), teamID, userID)
}

// DeleteTriggerCheckLock mocks base method.
func (m *MockDatabase) DeleteTriggerCheckLock(triggerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerCheckLock", triggerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerCheckLock indicates an expected call of DeleteTriggerCheckLock.
func (mr *MockDatabaseMockRecorder) DeleteTriggerCheckLock(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerCheckLock), triggerID)
}

// DeleteTriggerThrottling mocks base method.
func (m *MockDatabase) DeleteTriggerThrottling(triggerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggerThrottling", triggerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggerThrottling indicates an expected call of DeleteTriggerThrottling.
func (mr *MockDatabaseMockRecorder) DeleteTriggerThrottling(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggerThrottling), triggerID)
}

// DeleteTriggersSearchResults mocks base method.
func (m *MockDatabase) DeleteTriggersSearchResults(pagerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTriggersSearchResults", pagerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTriggersSearchResults indicates an expected call of DeleteTriggersSearchResults.
func (mr *MockDatabaseMockRecorder) DeleteTriggersSearchResults(pagerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTriggersSearchResults", reflect.TypeOf((*MockDatabase)(nil).DeleteTriggersSearchResults), pagerID)
}

// FetchNotificationEvent mocks base method.
func (m *MockDatabase) FetchNotificationEvent() (moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNotificationEvent")
	ret0, _ := ret[0].(moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotificationEvent indicates an expected call of FetchNotificationEvent.
func (mr *MockDatabaseMockRecorder) FetchNotificationEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).FetchNotificationEvent))
}

// FetchNotifications mocks base method.
func (m *MockDatabase) FetchNotifications(to, limit int64) ([]*moira.ScheduledNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNotifications", to, limit)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNotifications indicates an expected call of FetchNotifications.
func (mr *MockDatabaseMockRecorder) FetchNotifications(to, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNotifications", reflect.TypeOf((*MockDatabase)(nil).FetchNotifications), to, limit)
}

// FetchTriggersToReindex mocks base method.
func (m *MockDatabase) FetchTriggersToReindex(from int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTriggersToReindex", from)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTriggersToReindex indicates an expected call of FetchTriggersToReindex.
func (mr *MockDatabaseMockRecorder) FetchTriggersToReindex(from any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTriggersToReindex", reflect.TypeOf((*MockDatabase)(nil).FetchTriggersToReindex), from)
}

// GetAllContacts mocks base method.
func (m *MockDatabase) GetAllContacts() ([]*moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContacts")
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContacts indicates an expected call of GetAllContacts.
func (mr *MockDatabaseMockRecorder) GetAllContacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContacts", reflect.TypeOf((*MockDatabase)(nil).GetAllContacts))
}

// GetAllTeams mocks base method.
func (m *MockDatabase) GetAllTeams() ([]moira.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeams")
	ret0, _ := ret[0].([]moira.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeams indicates an expected call of GetAllTeams.
func (mr *MockDatabaseMockRecorder) GetAllTeams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeams", reflect.TypeOf((*MockDatabase)(nil).GetAllTeams))
}

// GetAllTriggerIDs mocks base method.
func (m *MockDatabase) GetAllTriggerIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTriggerIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTriggerIDs indicates an expected call of GetAllTriggerIDs.
func (mr *MockDatabaseMockRecorder) GetAllTriggerIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetAllTriggerIDs))
}

// GetChatByUsername mocks base method.
func (m *MockDatabase) GetChatByUsername(messenger, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatByUsername", messenger, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByUsername indicates an expected call of GetChatByUsername.
func (mr *MockDatabaseMockRecorder) GetChatByUsername(messenger, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByUsername", reflect.TypeOf((*MockDatabase)(nil).GetChatByUsername), messenger, username)
}

// GetChecksUpdatesCount mocks base method.
func (m *MockDatabase) GetChecksUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChecksUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChecksUpdatesCount indicates an expected call of GetChecksUpdatesCount.
func (mr *MockDatabaseMockRecorder) GetChecksUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChecksUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetChecksUpdatesCount))
}

// GetContact mocks base method.
func (m *MockDatabase) GetContact(contactID string) (moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContact", contactID)
	ret0, _ := ret[0].(moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContact indicates an expected call of GetContact.
func (mr *MockDatabaseMockRecorder) GetContact(contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContact", reflect.TypeOf((*MockDatabase)(nil).GetContact), contactID)
}

// GetContacts mocks base method.
func (m *MockDatabase) GetContacts(contactIDs []string) ([]*moira.ContactData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContacts", contactIDs)
	ret0, _ := ret[0].([]*moira.ContactData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContacts indicates an expected call of GetContacts.
func (mr *MockDatabaseMockRecorder) GetContacts(contactIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContacts", reflect.TypeOf((*MockDatabase)(nil).GetContacts), contactIDs)
}

// GetDeliveryChecksData mocks base method.
func (m *MockDatabase) GetDeliveryChecksData(contactType, from, to string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryChecksData", contactType, from, to)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryChecksData indicates an expected call of GetDeliveryChecksData.
func (mr *MockDatabaseMockRecorder) GetDeliveryChecksData(contactType, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryChecksData", reflect.TypeOf((*MockDatabase)(nil).GetDeliveryChecksData), contactType, from, to)
}

// GetMetricRetention mocks base method.
func (m *MockDatabase) GetMetricRetention(metric string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricRetention", metric)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricRetention indicates an expected call of GetMetricRetention.
func (mr *MockDatabaseMockRecorder) GetMetricRetention(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricRetention", reflect.TypeOf((*MockDatabase)(nil).GetMetricRetention), metric)
}

// GetMetricsTTLSeconds mocks base method.
func (m *MockDatabase) GetMetricsTTLSeconds() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsTTLSeconds")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetMetricsTTLSeconds indicates an expected call of GetMetricsTTLSeconds.
func (mr *MockDatabaseMockRecorder) GetMetricsTTLSeconds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsTTLSeconds", reflect.TypeOf((*MockDatabase)(nil).GetMetricsTTLSeconds))
}

// GetMetricsUpdatesCount mocks base method.
func (m *MockDatabase) GetMetricsUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsUpdatesCount indicates an expected call of GetMetricsUpdatesCount.
func (mr *MockDatabaseMockRecorder) GetMetricsUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetMetricsUpdatesCount))
}

// GetMetricsValues mocks base method.
func (m *MockDatabase) GetMetricsValues(metrics []string, from, until int64) (map[string][]*moira.MetricValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsValues", metrics, from, until)
	ret0, _ := ret[0].(map[string][]*moira.MetricValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsValues indicates an expected call of GetMetricsValues.
func (mr *MockDatabaseMockRecorder) GetMetricsValues(metrics, from, until any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsValues", reflect.TypeOf((*MockDatabase)(nil).GetMetricsValues), metrics, from, until)
}

// GetNotificationEventCount mocks base method.
func (m *MockDatabase) GetNotificationEventCount(triggerID, from, to string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationEventCount", triggerID, from, to)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetNotificationEventCount indicates an expected call of GetNotificationEventCount.
func (mr *MockDatabaseMockRecorder) GetNotificationEventCount(triggerID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEventCount", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEventCount), triggerID, from, to)
}

// GetNotificationEvents mocks base method.
func (m *MockDatabase) GetNotificationEvents(triggerID string, page, size int64, from, to string) ([]*moira.NotificationEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationEvents", triggerID, page, size, from, to)
	ret0, _ := ret[0].([]*moira.NotificationEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationEvents indicates an expected call of GetNotificationEvents.
func (mr *MockDatabaseMockRecorder) GetNotificationEvents(triggerID, page, size, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).GetNotificationEvents), triggerID, page, size, from, to)
}

// GetNotifications mocks base method.
func (m *MockDatabase) GetNotifications(start, end int64) ([]*moira.ScheduledNotification, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifications", start, end)
	ret0, _ := ret[0].([]*moira.ScheduledNotification)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNotifications indicates an expected call of GetNotifications.
func (mr *MockDatabaseMockRecorder) GetNotifications(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifications", reflect.TypeOf((*MockDatabase)(nil).GetNotifications), start, end)
}

// GetNotificationsHistoryByContactID mocks base method.
func (m *MockDatabase) GetNotificationsHistoryByContactID(contactID string, from, to, page, size int64) ([]*moira.NotificationEventHistoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsHistoryByContactID", contactID, from, to, page, size)
	ret0, _ := ret[0].([]*moira.NotificationEventHistoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsHistoryByContactID indicates an expected call of GetNotificationsHistoryByContactID.
func (mr *MockDatabaseMockRecorder) GetNotificationsHistoryByContactID(contactID, from, to, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsHistoryByContactID", reflect.TypeOf((*MockDatabase)(nil).GetNotificationsHistoryByContactID), contactID, from, to, page, size)
}

// GetNotifierState mocks base method.
func (m *MockDatabase) GetNotifierState() (moira.NotifierState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotifierState")
	ret0, _ := ret[0].(moira.NotifierState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotifierState indicates an expected call of GetNotifierState.
func (mr *MockDatabaseMockRecorder) GetNotifierState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotifierState", reflect.TypeOf((*MockDatabase)(nil).GetNotifierState))
}

// GetPatternMetrics mocks base method.
func (m *MockDatabase) GetPatternMetrics(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternMetrics", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternMetrics indicates an expected call of GetPatternMetrics.
func (mr *MockDatabaseMockRecorder) GetPatternMetrics(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternMetrics", reflect.TypeOf((*MockDatabase)(nil).GetPatternMetrics), pattern)
}

// GetPatternTriggerIDs mocks base method.
func (m *MockDatabase) GetPatternTriggerIDs(pattern string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatternTriggerIDs", pattern)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatternTriggerIDs indicates an expected call of GetPatternTriggerIDs.
func (mr *MockDatabaseMockRecorder) GetPatternTriggerIDs(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetPatternTriggerIDs), pattern)
}

// GetPatterns mocks base method.
func (m *MockDatabase) GetPatterns() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatterns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatterns indicates an expected call of GetPatterns.
func (mr *MockDatabaseMockRecorder) GetPatterns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatterns", reflect.TypeOf((*MockDatabase)(nil).GetPatterns))
}

// GetPrometheusChecksUpdatesCount mocks base method.
func (m *MockDatabase) GetPrometheusChecksUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrometheusChecksUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrometheusChecksUpdatesCount indicates an expected call of GetPrometheusChecksUpdatesCount.
func (mr *MockDatabaseMockRecorder) GetPrometheusChecksUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrometheusChecksUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetPrometheusChecksUpdatesCount))
}

// GetRemoteChecksUpdatesCount mocks base method.
func (m *MockDatabase) GetRemoteChecksUpdatesCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteChecksUpdatesCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteChecksUpdatesCount indicates an expected call of GetRemoteChecksUpdatesCount.
func (mr *MockDatabaseMockRecorder) GetRemoteChecksUpdatesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteChecksUpdatesCount", reflect.TypeOf((*MockDatabase)(nil).GetRemoteChecksUpdatesCount))
}

// GetSubscription mocks base method.
func (m *MockDatabase) GetSubscription(id string) (moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", id)
	ret0, _ := ret[0].(moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription.
func (mr *MockDatabaseMockRecorder) GetSubscription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*MockDatabase)(nil).GetSubscription), id)
}

// GetSubscriptions mocks base method.
func (m *MockDatabase) GetSubscriptions(subscriptionIDs []string) ([]*moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptions", subscriptionIDs)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptions indicates an expected call of GetSubscriptions.
func (mr *MockDatabaseMockRecorder) GetSubscriptions(subscriptionIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetSubscriptions), subscriptionIDs)
}

// GetTagNames mocks base method.
func (m *MockDatabase) GetTagNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagNames indicates an expected call of GetTagNames.
func (mr *MockDatabaseMockRecorder) GetTagNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagNames", reflect.TypeOf((*MockDatabase)(nil).GetTagNames))
}

// GetTagTriggerIDs mocks base method.
func (m *MockDatabase) GetTagTriggerIDs(tagName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagTriggerIDs", tagName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagTriggerIDs indicates an expected call of GetTagTriggerIDs.
func (mr *MockDatabaseMockRecorder) GetTagTriggerIDs(tagName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTagTriggerIDs), tagName)
}

// GetTagsSubscriptions mocks base method.
func (m *MockDatabase) GetTagsSubscriptions(tags []string) ([]*moira.SubscriptionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagsSubscriptions", tags)
	ret0, _ := ret[0].([]*moira.SubscriptionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsSubscriptions indicates an expected call of GetTagsSubscriptions.
func (mr *MockDatabaseMockRecorder) GetTagsSubscriptions(tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsSubscriptions", reflect.TypeOf((*MockDatabase)(nil).GetTagsSubscriptions), tags)
}

// GetTeam mocks base method.
func (m *MockDatabase) GetTeam(teamID string) (moira.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", teamID)
	ret0, _ := ret[0].(moira.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockDatabaseMockRecorder) GetTeam(teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockDatabase)(nil).GetTeam), teamID)
}

// GetTeamByName mocks base method.
func (m *MockDatabase) GetTeamByName(name string) (moira.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByName", name)
	ret0, _ := ret[0].(moira.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByName indicates an expected call of GetTeamByName.
func (mr *MockDatabaseMockRecorder) GetTeamByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByName", reflect.TypeOf((*MockDatabase)(nil).GetTeamByName), name)
}

// GetTeamContactIDs mocks base method.
func (m *MockDatabase) GetTeamContactIDs(teamID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamContactIDs", teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamContactIDs indicates an expected call of GetTeamContactIDs.
func (mr *MockDatabaseMockRecorder) GetTeamContactIDs(teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamContactIDs", reflect.TypeOf((*MockDatabase)(nil).GetTeamContactIDs), teamID)
}

// GetTeamSubscriptionIDs mocks base method.
func (m *MockDatabase) GetTeamSubscriptionIDs(teamID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamSubscriptionIDs", teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamSubscriptionIDs indicates an expected call of GetTeamSubscriptionIDs.
func (mr *MockDatabaseMockRecorder) GetTeamSubscriptionIDs(teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamSubscriptionIDs", reflect.TypeOf((*MockDatabase)(nil).GetTeamSubscriptionIDs), teamID)
}

// GetTeamUsers mocks base method.
func (m *MockDatabase) GetTeamUsers(teamID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamUsers", teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamUsers indicates an expected call of GetTeamUsers.
func (mr *MockDatabaseMockRecorder) GetTeamUsers(teamID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamUsers", reflect.TypeOf((*MockDatabase)(nil).GetTeamUsers), teamID)
}

// GetTrigger mocks base method.
func (m *MockDatabase) GetTrigger(triggerID string) (moira.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrigger", triggerID)
	ret0, _ := ret[0].(moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrigger indicates an expected call of GetTrigger.
func (mr *MockDatabaseMockRecorder) GetTrigger(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrigger", reflect.TypeOf((*MockDatabase)(nil).GetTrigger), triggerID)
}

// GetTriggerChecks mocks base method.
func (m *MockDatabase) GetTriggerChecks(triggerIDs []string) ([]*moira.TriggerCheck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerChecks", triggerIDs)
	ret0, _ := ret[0].([]*moira.TriggerCheck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerChecks indicates an expected call of GetTriggerChecks.
func (mr *MockDatabaseMockRecorder) GetTriggerChecks(triggerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerChecks", reflect.TypeOf((*MockDatabase)(nil).GetTriggerChecks), triggerIDs)
}

// GetTriggerCount mocks base method.
func (m *MockDatabase) GetTriggerCount(clusterKeys []moira.ClusterKey) (map[moira.ClusterKey]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerCount", clusterKeys)
	ret0, _ := ret[0].(map[moira.ClusterKey]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerCount indicates an expected call of GetTriggerCount.
func (mr *MockDatabaseMockRecorder) GetTriggerCount(clusterKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerCount", reflect.TypeOf((*MockDatabase)(nil).GetTriggerCount), clusterKeys)
}

// GetTriggerIDs mocks base method.
func (m *MockDatabase) GetTriggerIDs(clusterKey moira.ClusterKey) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerIDs", clusterKey)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerIDs indicates an expected call of GetTriggerIDs.
func (mr *MockDatabaseMockRecorder) GetTriggerIDs(clusterKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetTriggerIDs), clusterKey)
}

// GetTriggerIDsStartWith mocks base method.
func (m *MockDatabase) GetTriggerIDsStartWith(prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerIDsStartWith", prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerIDsStartWith indicates an expected call of GetTriggerIDsStartWith.
func (mr *MockDatabaseMockRecorder) GetTriggerIDsStartWith(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerIDsStartWith", reflect.TypeOf((*MockDatabase)(nil).GetTriggerIDsStartWith), prefix)
}

// GetTriggerLastCheck mocks base method.
func (m *MockDatabase) GetTriggerLastCheck(triggerID string) (moira.CheckData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerLastCheck", triggerID)
	ret0, _ := ret[0].(moira.CheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerLastCheck indicates an expected call of GetTriggerLastCheck.
func (mr *MockDatabaseMockRecorder) GetTriggerLastCheck(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).GetTriggerLastCheck), triggerID)
}

// GetTriggerThrottling mocks base method.
func (m *MockDatabase) GetTriggerThrottling(triggerID string) (time.Time, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerThrottling", triggerID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTriggerThrottling indicates an expected call of GetTriggerThrottling.
func (mr *MockDatabaseMockRecorder) GetTriggerThrottling(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).GetTriggerThrottling), triggerID)
}

// GetTriggers mocks base method.
func (m *MockDatabase) GetTriggers(triggerIDs []string) ([]*moira.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggers", triggerIDs)
	ret0, _ := ret[0].([]*moira.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggers indicates an expected call of GetTriggers.
func (mr *MockDatabaseMockRecorder) GetTriggers(triggerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggers", reflect.TypeOf((*MockDatabase)(nil).GetTriggers), triggerIDs)
}

// GetTriggersSearchResults mocks base method.
func (m *MockDatabase) GetTriggersSearchResults(searchResultsID string, page, size int64) ([]*moira.SearchResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersSearchResults", searchResultsID, page, size)
	ret0, _ := ret[0].([]*moira.SearchResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTriggersSearchResults indicates an expected call of GetTriggersSearchResults.
func (mr *MockDatabaseMockRecorder) GetTriggersSearchResults(searchResultsID, page, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersSearchResults", reflect.TypeOf((*MockDatabase)(nil).GetTriggersSearchResults), searchResultsID, page, size)
}

// GetTriggersToCheck mocks base method.
func (m *MockDatabase) GetTriggersToCheck(clusterKey moira.ClusterKey, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersToCheck", clusterKey, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggersToCheck indicates an expected call of GetTriggersToCheck.
func (mr *MockDatabaseMockRecorder) GetTriggersToCheck(clusterKey, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersToCheck", reflect.TypeOf((*MockDatabase)(nil).GetTriggersToCheck), clusterKey, count)
}

// GetTriggersToCheckCount mocks base method.
func (m *MockDatabase) GetTriggersToCheckCount(clusterKey moira.ClusterKey) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggersToCheckCount", clusterKey)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggersToCheckCount indicates an expected call of GetTriggersToCheckCount.
func (mr *MockDatabaseMockRecorder) GetTriggersToCheckCount(clusterKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggersToCheckCount", reflect.TypeOf((*MockDatabase)(nil).GetTriggersToCheckCount), clusterKey)
}

// GetUnusedTriggerIDs mocks base method.
func (m *MockDatabase) GetUnusedTriggerIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnusedTriggerIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnusedTriggerIDs indicates an expected call of GetUnusedTriggerIDs.
func (mr *MockDatabaseMockRecorder) GetUnusedTriggerIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnusedTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).GetUnusedTriggerIDs))
}

// GetUserContactIDs mocks base method.
func (m *MockDatabase) GetUserContactIDs(userLogin string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserContactIDs", userLogin)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserContactIDs indicates an expected call of GetUserContactIDs.
func (mr *MockDatabaseMockRecorder) GetUserContactIDs(userLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserContactIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserContactIDs), userLogin)
}

// GetUserSubscriptionIDs mocks base method.
func (m *MockDatabase) GetUserSubscriptionIDs(userLogin string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubscriptionIDs", userLogin)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSubscriptionIDs indicates an expected call of GetUserSubscriptionIDs.
func (mr *MockDatabaseMockRecorder) GetUserSubscriptionIDs(userLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubscriptionIDs", reflect.TypeOf((*MockDatabase)(nil).GetUserSubscriptionIDs), userLogin)
}

// GetUserTeams mocks base method.
func (m *MockDatabase) GetUserTeams(userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTeams", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTeams indicates an expected call of GetUserTeams.
func (mr *MockDatabaseMockRecorder) GetUserTeams(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTeams", reflect.TypeOf((*MockDatabase)(nil).GetUserTeams), userID)
}

// IsTeamContainUser mocks base method.
func (m *MockDatabase) IsTeamContainUser(teamID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamContainUser", teamID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamContainUser indicates an expected call of IsTeamContainUser.
func (mr *MockDatabaseMockRecorder) IsTeamContainUser(teamID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamContainUser", reflect.TypeOf((*MockDatabase)(nil).IsTeamContainUser), teamID, userID)
}

// IsTriggersSearchResultsExist mocks base method.
func (m *MockDatabase) IsTriggersSearchResultsExist(pagerID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTriggersSearchResultsExist", pagerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTriggersSearchResultsExist indicates an expected call of IsTriggersSearchResultsExist.
func (mr *MockDatabaseMockRecorder) IsTriggersSearchResultsExist(pagerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTriggersSearchResultsExist", reflect.TypeOf((*MockDatabase)(nil).IsTriggersSearchResultsExist), pagerID)
}

// MarkTriggersAsUnused mocks base method.
func (m *MockDatabase) MarkTriggersAsUnused(triggerIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range triggerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTriggersAsUnused", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTriggersAsUnused indicates an expected call of MarkTriggersAsUnused.
func (mr *MockDatabaseMockRecorder) MarkTriggersAsUnused(triggerIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTriggersAsUnused", reflect.TypeOf((*MockDatabase)(nil).MarkTriggersAsUnused), triggerIDs...)
}

// MarkTriggersAsUsed mocks base method.
func (m *MockDatabase) MarkTriggersAsUsed(triggerIDs ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range triggerIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTriggersAsUsed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTriggersAsUsed indicates an expected call of MarkTriggersAsUsed.
func (mr *MockDatabaseMockRecorder) MarkTriggersAsUsed(triggerIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTriggersAsUsed", reflect.TypeOf((*MockDatabase)(nil).MarkTriggersAsUsed), triggerIDs...)
}

// NewLock mocks base method.
func (m *MockDatabase) NewLock(name string, ttl time.Duration) moira.Lock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLock", name, ttl)
	ret0, _ := ret[0].(moira.Lock)
	return ret0
}

// NewLock indicates an expected call of NewLock.
func (mr *MockDatabaseMockRecorder) NewLock(name, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockDatabase)(nil).NewLock), name, ttl)
}

// PushContactNotificationToHistory mocks base method.
func (m *MockDatabase) PushContactNotificationToHistory(notification *moira.ScheduledNotification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushContactNotificationToHistory", notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushContactNotificationToHistory indicates an expected call of PushContactNotificationToHistory.
func (mr *MockDatabaseMockRecorder) PushContactNotificationToHistory(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushContactNotificationToHistory", reflect.TypeOf((*MockDatabase)(nil).PushContactNotificationToHistory), notification)
}

// PushNotificationEvent mocks base method.
func (m *MockDatabase) PushNotificationEvent(event *moira.NotificationEvent, ui bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushNotificationEvent", event, ui)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushNotificationEvent indicates an expected call of PushNotificationEvent.
func (mr *MockDatabaseMockRecorder) PushNotificationEvent(event, ui any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushNotificationEvent", reflect.TypeOf((*MockDatabase)(nil).PushNotificationEvent), event, ui)
}

// ReleaseTriggerCheckLock mocks base method.
func (m *MockDatabase) ReleaseTriggerCheckLock(triggerID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseTriggerCheckLock", triggerID)
}

// ReleaseTriggerCheckLock indicates an expected call of ReleaseTriggerCheckLock.
func (mr *MockDatabaseMockRecorder) ReleaseTriggerCheckLock(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).ReleaseTriggerCheckLock), triggerID)
}

// RemoveAllMetrics mocks base method.
func (m *MockDatabase) RemoveAllMetrics() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllMetrics")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllMetrics indicates an expected call of RemoveAllMetrics.
func (mr *MockDatabaseMockRecorder) RemoveAllMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllMetrics", reflect.TypeOf((*MockDatabase)(nil).RemoveAllMetrics))
}

// RemoveAllNotificationEvents mocks base method.
func (m *MockDatabase) RemoveAllNotificationEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllNotificationEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllNotificationEvents indicates an expected call of RemoveAllNotificationEvents.
func (mr *MockDatabaseMockRecorder) RemoveAllNotificationEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllNotificationEvents", reflect.TypeOf((*MockDatabase)(nil).RemoveAllNotificationEvents))
}

// RemoveAllNotifications mocks base method.
func (m *MockDatabase) RemoveAllNotifications() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllNotifications")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllNotifications indicates an expected call of RemoveAllNotifications.
func (mr *MockDatabaseMockRecorder) RemoveAllNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllNotifications", reflect.TypeOf((*MockDatabase)(nil).RemoveAllNotifications))
}

// RemoveContact mocks base method.
func (m *MockDatabase) RemoveContact(contactID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContact", contactID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContact indicates an expected call of RemoveContact.
func (mr *MockDatabaseMockRecorder) RemoveContact(contactID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContact", reflect.TypeOf((*MockDatabase)(nil).RemoveContact), contactID)
}

// RemoveDeliveryChecksData mocks base method.
func (m *MockDatabase) RemoveDeliveryChecksData(contactType, from, to string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeliveryChecksData", contactType, from, to)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDeliveryChecksData indicates an expected call of RemoveDeliveryChecksData.
func (mr *MockDatabaseMockRecorder) RemoveDeliveryChecksData(contactType, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeliveryChecksData", reflect.TypeOf((*MockDatabase)(nil).RemoveDeliveryChecksData), contactType, from, to)
}

// RemoveMetricRetention mocks base method.
func (m *MockDatabase) RemoveMetricRetention(metric string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricRetention", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricRetention indicates an expected call of RemoveMetricRetention.
func (mr *MockDatabaseMockRecorder) RemoveMetricRetention(metric any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricRetention", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricRetention), metric)
}

// RemoveMetricValues mocks base method.
func (m *MockDatabase) RemoveMetricValues(metric, from, to string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricValues", metric, from, to)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMetricValues indicates an expected call of RemoveMetricValues.
func (mr *MockDatabaseMockRecorder) RemoveMetricValues(metric, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricValues), metric, from, to)
}

// RemoveMetricsByPrefix mocks base method.
func (m *MockDatabase) RemoveMetricsByPrefix(pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricsByPrefix", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricsByPrefix indicates an expected call of RemoveMetricsByPrefix.
func (mr *MockDatabaseMockRecorder) RemoveMetricsByPrefix(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricsByPrefix", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricsByPrefix), pattern)
}

// RemoveMetricsValues mocks base method.
func (m *MockDatabase) RemoveMetricsValues(metrics []string, toTime int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetricsValues", metrics, toTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetricsValues indicates an expected call of RemoveMetricsValues.
func (mr *MockDatabaseMockRecorder) RemoveMetricsValues(metrics, toTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetricsValues", reflect.TypeOf((*MockDatabase)(nil).RemoveMetricsValues), metrics, toTime)
}

// RemoveNotification mocks base method.
func (m *MockDatabase) RemoveNotification(notificationKey string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNotification", notificationKey)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveNotification indicates an expected call of RemoveNotification.
func (mr *MockDatabaseMockRecorder) RemoveNotification(notificationKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNotification", reflect.TypeOf((*MockDatabase)(nil).RemoveNotification), notificationKey)
}

// RemoveFilteredNotifications mocks base method.
func (m *MockDatabase) RemoveFilteredNotifications(arg0, arg1 int64, arg2 []string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFilteredNotifications", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFilteredNotifications indicates an expected call of RemoveFilteredNotifications.
func (mr *MockDatabaseMockRecorder) RemoveFilteredNotifications(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredNotifications", reflect.TypeOf((*MockDatabase)(nil).RemoveFilteredNotifications), arg0, arg1, arg2)
}

// RemovePattern mocks base method.
func (m *MockDatabase) RemovePattern(pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePattern", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePattern indicates an expected call of RemovePattern.
func (mr *MockDatabaseMockRecorder) RemovePattern(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePattern", reflect.TypeOf((*MockDatabase)(nil).RemovePattern), pattern)
}

// RemovePatternTriggerIDs mocks base method.
func (m *MockDatabase) RemovePatternTriggerIDs(pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternTriggerIDs", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternTriggerIDs indicates an expected call of RemovePatternTriggerIDs.
func (mr *MockDatabaseMockRecorder) RemovePatternTriggerIDs(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternTriggerIDs", reflect.TypeOf((*MockDatabase)(nil).RemovePatternTriggerIDs), pattern)
}

// RemovePatternWithMetrics mocks base method.
func (m *MockDatabase) RemovePatternWithMetrics(pattern string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternWithMetrics", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternWithMetrics indicates an expected call of RemovePatternWithMetrics.
func (mr *MockDatabaseMockRecorder) RemovePatternWithMetrics(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternWithMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternWithMetrics), pattern)
}

// RemovePatternsMetrics mocks base method.
func (m *MockDatabase) RemovePatternsMetrics(pattern []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePatternsMetrics", pattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePatternsMetrics indicates an expected call of RemovePatternsMetrics.
func (mr *MockDatabaseMockRecorder) RemovePatternsMetrics(pattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePatternsMetrics", reflect.TypeOf((*MockDatabase)(nil).RemovePatternsMetrics), pattern)
}

// RemoveSubscription mocks base method.
func (m *MockDatabase) RemoveSubscription(subscriptionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubscription", subscriptionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubscription indicates an expected call of RemoveSubscription.
func (mr *MockDatabaseMockRecorder) RemoveSubscription(subscriptionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscription", reflect.TypeOf((*MockDatabase)(nil).RemoveSubscription), subscriptionID)
}

// RemoveTag mocks base method.
func (m *MockDatabase) RemoveTag(tagName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", tagName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockDatabaseMockRecorder) RemoveTag(tagName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockDatabase)(nil).RemoveTag), tagName)
}

// RemoveTrigger mocks base method.
func (m *MockDatabase) RemoveTrigger(triggerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrigger", triggerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrigger indicates an expected call of RemoveTrigger.
func (mr *MockDatabaseMockRecorder) RemoveTrigger(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrigger", reflect.TypeOf((*MockDatabase)(nil).RemoveTrigger), triggerID)
}

// RemoveTriggerLastCheck mocks base method.
func (m *MockDatabase) RemoveTriggerLastCheck(triggerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTriggerLastCheck", triggerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTriggerLastCheck indicates an expected call of RemoveTriggerLastCheck.
func (mr *MockDatabaseMockRecorder) RemoveTriggerLastCheck(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).RemoveTriggerLastCheck), triggerID)
}

// RemoveTriggersToReindex mocks base method.
func (m *MockDatabase) RemoveTriggersToReindex(to int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTriggersToReindex", to)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTriggersToReindex indicates an expected call of RemoveTriggersToReindex.
func (mr *MockDatabaseMockRecorder) RemoveTriggersToReindex(to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTriggersToReindex", reflect.TypeOf((*MockDatabase)(nil).RemoveTriggersToReindex), to)
}

// RemoveUser mocks base method.
func (m *MockDatabase) RemoveUser(messenger, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", messenger, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockDatabaseMockRecorder) RemoveUser(messenger, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockDatabase)(nil).RemoveUser), messenger, username)
}

// SaveContact mocks base method.
func (m *MockDatabase) SaveContact(contact *moira.ContactData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContact", contact)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContact indicates an expected call of SaveContact.
func (mr *MockDatabaseMockRecorder) SaveContact(contact any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContact", reflect.TypeOf((*MockDatabase)(nil).SaveContact), contact)
}

// SaveMetrics mocks base method.
func (m *MockDatabase) SaveMetrics(buffer map[string]*moira.MatchedMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetrics", buffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetrics indicates an expected call of SaveMetrics.
func (mr *MockDatabaseMockRecorder) SaveMetrics(buffer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetrics", reflect.TypeOf((*MockDatabase)(nil).SaveMetrics), buffer)
}

// SaveSubscription mocks base method.
func (m *MockDatabase) SaveSubscription(subscription *moira.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscription", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscription indicates an expected call of SaveSubscription.
func (mr *MockDatabaseMockRecorder) SaveSubscription(subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscription", reflect.TypeOf((*MockDatabase)(nil).SaveSubscription), subscription)
}

// SaveSubscriptions mocks base method.
func (m *MockDatabase) SaveSubscriptions(subscriptions []*moira.SubscriptionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSubscriptions", subscriptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSubscriptions indicates an expected call of SaveSubscriptions.
func (mr *MockDatabaseMockRecorder) SaveSubscriptions(subscriptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubscriptions", reflect.TypeOf((*MockDatabase)(nil).SaveSubscriptions), subscriptions)
}

// SaveTeam mocks base method.
func (m *MockDatabase) SaveTeam(teamID string, team moira.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTeam", teamID, team)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTeam indicates an expected call of SaveTeam.
func (mr *MockDatabaseMockRecorder) SaveTeam(teamID, team any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeam", reflect.TypeOf((*MockDatabase)(nil).SaveTeam), teamID, team)
}

// SaveTeamsAndUsers mocks base method.
func (m *MockDatabase) SaveTeamsAndUsers(teamID string, users []string, usersTeams map[string][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTeamsAndUsers", teamID, users, usersTeams)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTeamsAndUsers indicates an expected call of SaveTeamsAndUsers.
func (mr *MockDatabaseMockRecorder) SaveTeamsAndUsers(teamID, users, usersTeams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeamsAndUsers", reflect.TypeOf((*MockDatabase)(nil).SaveTeamsAndUsers), teamID, users, usersTeams)
}

// SaveTrigger mocks base method.
func (m *MockDatabase) SaveTrigger(triggerID string, trigger *moira.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTrigger", triggerID, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTrigger indicates an expected call of SaveTrigger.
func (mr *MockDatabaseMockRecorder) SaveTrigger(triggerID, trigger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTrigger", reflect.TypeOf((*MockDatabase)(nil).SaveTrigger), triggerID, trigger)
}

// SaveTriggersSearchResults mocks base method.
func (m *MockDatabase) SaveTriggersSearchResults(searchResultsID string, searchResults []*moira.SearchResult, recordTTL time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTriggersSearchResults", searchResultsID, searchResults, recordTTL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTriggersSearchResults indicates an expected call of SaveTriggersSearchResults.
func (mr *MockDatabaseMockRecorder) SaveTriggersSearchResults(searchResultsID, searchResults, recordTTL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTriggersSearchResults", reflect.TypeOf((*MockDatabase)(nil).SaveTriggersSearchResults), searchResultsID, searchResults, recordTTL)
}

// SetNotifierState mocks base method.
func (m *MockDatabase) SetNotifierState(actor, state string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNotifierState", actor, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNotifierState indicates an expected call of SetNotifierState.
func (mr *MockDatabaseMockRecorder) SetNotifierState(actor, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNotifierState", reflect.TypeOf((*MockDatabase)(nil).SetNotifierState), actor, state)
}

// SetTriggerCheckLock mocks base method.
func (m *MockDatabase) SetTriggerCheckLock(triggerID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerCheckLock", triggerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetTriggerCheckLock indicates an expected call of SetTriggerCheckLock.
func (mr *MockDatabaseMockRecorder) SetTriggerCheckLock(triggerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCheckLock", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCheckLock), triggerID)
}

// SetTriggerCheckMaintenance mocks base method.
func (m *MockDatabase) SetTriggerCheckMaintenance(triggerID string, metrics map[string]int64, triggerMaintenance *int64, userLogin string, timeCallMaintenance int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerCheckMaintenance", triggerID, metrics, triggerMaintenance, userLogin, timeCallMaintenance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerCheckMaintenance indicates an expected call of SetTriggerCheckMaintenance.
func (mr *MockDatabaseMockRecorder) SetTriggerCheckMaintenance(triggerID, metrics, triggerMaintenance, userLogin, timeCallMaintenance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerCheckMaintenance", reflect.TypeOf((*MockDatabase)(nil).SetTriggerCheckMaintenance), triggerID, metrics, triggerMaintenance, userLogin, timeCallMaintenance)
}

// SetTriggerLastCheck mocks base method.
func (m *MockDatabase) SetTriggerLastCheck(triggerID string, checkData *moira.CheckData, clusterKey moira.ClusterKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerLastCheck", triggerID, checkData, clusterKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerLastCheck indicates an expected call of SetTriggerLastCheck.
func (mr *MockDatabaseMockRecorder) SetTriggerLastCheck(triggerID, checkData, clusterKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerLastCheck", reflect.TypeOf((*MockDatabase)(nil).SetTriggerLastCheck), triggerID, checkData, clusterKey)
}

// SetTriggerThrottling mocks base method.
func (m *MockDatabase) SetTriggerThrottling(triggerID string, next time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTriggerThrottling", triggerID, next)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTriggerThrottling indicates an expected call of SetTriggerThrottling.
func (mr *MockDatabaseMockRecorder) SetTriggerThrottling(triggerID, next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTriggerThrottling", reflect.TypeOf((*MockDatabase)(nil).SetTriggerThrottling), triggerID, next)
}

// SetUsernameChat mocks base method.
func (m *MockDatabase) SetUsernameChat(messenger, username, chatRaw string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUsernameChat", messenger, username, chatRaw)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUsernameChat indicates an expected call of SetUsernameChat.
func (mr *MockDatabaseMockRecorder) SetUsernameChat(messenger, username, chatRaw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsernameChat", reflect.TypeOf((*MockDatabase)(nil).SetUsernameChat), messenger, username, chatRaw)
}

// SubscribeMetricEvents mocks base method.
func (m *MockDatabase) SubscribeMetricEvents(arg0 *tomb.Tomb, params *moira.SubscribeMetricEventsParams) (<-chan *moira.MetricEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeMetricEvents", arg0, params)
	ret0, _ := ret[0].(<-chan *moira.MetricEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeMetricEvents indicates an expected call of SubscribeMetricEvents.
func (mr *MockDatabaseMockRecorder) SubscribeMetricEvents(arg0, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeMetricEvents", reflect.TypeOf((*MockDatabase)(nil).SubscribeMetricEvents), arg0, params)
}

// UpdateMetricsHeartbeat mocks base method.
func (m *MockDatabase) UpdateMetricsHeartbeat() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetricsHeartbeat")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetricsHeartbeat indicates an expected call of UpdateMetricsHeartbeat.
func (mr *MockDatabaseMockRecorder) UpdateMetricsHeartbeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetricsHeartbeat", reflect.TypeOf((*MockDatabase)(nil).UpdateMetricsHeartbeat))
}
