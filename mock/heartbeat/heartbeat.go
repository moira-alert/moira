// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/notifier/selfstate/heartbeat (interfaces: Heartbeater)
//
// Generated by this command:
//
//	mockgen -destination=mock/heartbeat/heartbeat.go -package=mock_heartbeat github.com/moira-alert/moira/notifier/selfstate/heartbeat Heartbeater
//

// Package mock_heartbeat is a generated GoMock package.
package mock_heartbeat

import (
	reflect "reflect"

	datatypes "github.com/moira-alert/moira/datatypes"
	heartbeat "github.com/moira-alert/moira/notifier/selfstate/heartbeat"
	gomock "go.uber.org/mock/gomock"
)

// MockHeartbeater is a mock of Heartbeater interface.
type MockHeartbeater struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeaterMockRecorder
}

// MockHeartbeaterMockRecorder is the mock recorder for MockHeartbeater.
type MockHeartbeaterMockRecorder struct {
	mock *MockHeartbeater
}

// NewMockHeartbeater creates a new mock instance.
func NewMockHeartbeater(ctrl *gomock.Controller) *MockHeartbeater {
	mock := &MockHeartbeater{ctrl: ctrl}
	mock.recorder = &MockHeartbeaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHeartbeater) EXPECT() *MockHeartbeaterMockRecorder {
	return m.recorder
}

// AlertSettings mocks base method.
func (m *MockHeartbeater) AlertSettings() heartbeat.AlertConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlertSettings")
	ret0, _ := ret[0].(heartbeat.AlertConfig)
	return ret0
}

// AlertSettings indicates an expected call of AlertSettings.
func (mr *MockHeartbeaterMockRecorder) AlertSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlertSettings", reflect.TypeOf((*MockHeartbeater)(nil).AlertSettings))
}

// Check mocks base method.
func (m *MockHeartbeater) Check() (heartbeat.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(heartbeat.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockHeartbeaterMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockHeartbeater)(nil).Check))
}

// Type mocks base method.
func (m *MockHeartbeater) Type() datatypes.HeartbeatType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(datatypes.HeartbeatType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockHeartbeaterMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockHeartbeater)(nil).Type))
}
