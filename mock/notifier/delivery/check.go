// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira/senders/delivery (interfaces: CheckAction)
//
// Generated by this command:
//
//	mockgen -destination=mock/notifier/delivery/check.go -package=mock_delivery github.com/moira-alert/moira/senders/delivery CheckAction
//

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	reflect "reflect"

	moira "github.com/moira-alert/moira"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckAction is a mock of CheckAction interface.
type MockCheckAction struct {
	ctrl     *gomock.Controller
	recorder *MockCheckActionMockRecorder
}

// MockCheckActionMockRecorder is the mock recorder for MockCheckAction.
type MockCheckActionMockRecorder struct {
	mock *MockCheckAction
}

// NewMockCheckAction creates a new mock instance.
func NewMockCheckAction(ctrl *gomock.Controller) *MockCheckAction {
	mock := &MockCheckAction{ctrl: ctrl}
	mock.recorder = &MockCheckActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckAction) EXPECT() *MockCheckActionMockRecorder {
	return m.recorder
}

// CheckNotificationsDelivery mocks base method.
func (m *MockCheckAction) CheckNotificationsDelivery(arg0 []string) ([]string, moira.DeliveryTypesCounter) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNotificationsDelivery", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(moira.DeliveryTypesCounter)
	return ret0, ret1
}

// CheckNotificationsDelivery indicates an expected call of CheckNotificationsDelivery.
func (mr *MockCheckActionMockRecorder) CheckNotificationsDelivery(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNotificationsDelivery", reflect.TypeOf((*MockCheckAction)(nil).CheckNotificationsDelivery), arg0)
}
