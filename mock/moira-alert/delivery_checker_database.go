// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moira-alert/moira (interfaces: DeliveryCheckerDatabase)
//
// Generated by this command:
//
//	mockgen -destination=mock/moira-alert/delivery_checker_database.go -package=mock_moira_alert github.com/moira-alert/moira DeliveryCheckerDatabase
//

// Package mock_moira_alert is a generated GoMock package.
package mock_moira_alert

import (
	reflect "reflect"
	time "time"

	moira "github.com/moira-alert/moira"
	gomock "go.uber.org/mock/gomock"
)

// MockDeliveryCheckerDatabase is a mock of DeliveryCheckerDatabase interface.
type MockDeliveryCheckerDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryCheckerDatabaseMockRecorder
}

// MockDeliveryCheckerDatabaseMockRecorder is the mock recorder for MockDeliveryCheckerDatabase.
type MockDeliveryCheckerDatabaseMockRecorder struct {
	mock *MockDeliveryCheckerDatabase
}

// NewMockDeliveryCheckerDatabase creates a new mock instance.
func NewMockDeliveryCheckerDatabase(ctrl *gomock.Controller) *MockDeliveryCheckerDatabase {
	mock := &MockDeliveryCheckerDatabase{ctrl: ctrl}
	mock.recorder = &MockDeliveryCheckerDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryCheckerDatabase) EXPECT() *MockDeliveryCheckerDatabaseMockRecorder {
	return m.recorder
}

// AddDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) AddDeliveryChecksData(arg0 string, arg1 int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeliveryChecksData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeliveryChecksData indicates an expected call of AddDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) AddDeliveryChecksData(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).AddDeliveryChecksData), arg0, arg1, arg2)
}

// GetDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) GetDeliveryChecksData(arg0, arg1, arg2 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryChecksData", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryChecksData indicates an expected call of GetDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) GetDeliveryChecksData(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).GetDeliveryChecksData), arg0, arg1, arg2)
}

// NewLock mocks base method.
func (m *MockDeliveryCheckerDatabase) NewLock(arg0 string, arg1 time.Duration) moira.Lock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLock", arg0, arg1)
	ret0, _ := ret[0].(moira.Lock)
	return ret0
}

// NewLock indicates an expected call of NewLock.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) NewLock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).NewLock), arg0, arg1)
}

// RemoveDeliveryChecksData mocks base method.
func (m *MockDeliveryCheckerDatabase) RemoveDeliveryChecksData(arg0, arg1, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDeliveryChecksData", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveDeliveryChecksData indicates an expected call of RemoveDeliveryChecksData.
func (mr *MockDeliveryCheckerDatabaseMockRecorder) RemoveDeliveryChecksData(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDeliveryChecksData", reflect.TypeOf((*MockDeliveryCheckerDatabase)(nil).RemoveDeliveryChecksData), arg0, arg1, arg2)
}
